# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$spring, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
my_elements <- sample(result[domain != ''][, unique(element)], 8)
data_for_graph <- result[element %in% my_elements, .(element, target, domain)][order(element, domain)]
## Elements dt
elements_dt <- data.table(element = unique(c(data_for_graph$element, data_for_graph$target)))
### With domain info
element_d <- result[, .(element, domain)][elements_dt, on = 'element']
element_d <- element_d[!duplicated(element_d)]
## Graph
graph <- graph_from_data_frame(d = data_for_graph, vertices = element_d, directed = F)
# Color
mycolor <- colormap(colormap=colormaps$spring, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$viridis, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
library(data.table)
c(rep('privately', 4), rep('government',4)),
235/(235+36)
300/(300+45)
(30+45)
1*(1.05)
2*(1.05)
1*(1.05) + 2*(1.05)
6+5+2+1
6+5+(1*1.05)+(2*1.05)
6+5+(1*1.05)+(2*1.05) / 6+5+2+1
(6+5+(1*1.05)+(2*1.05) - 6+5+2+1) / (6+5+2+1)
1105+53
948+105
400*(1.07)
(400+400*0.07)
4/20
1105/53
53/1105
948/105
3159/1054
214000/50
(214000*62)/50
175000*0.1
175000*0.35
(0.1*175000)
175000/0.1
(175000/0.1)*0.35
85/1.25
76/1.35
160/0.68
81/1.07
43/2.40
14.000*0.04
14000*0.04
560*3
13000*0.04
(13000-(13000*0.04))-((13000-(13000*0.04))*0.04)
(433*45)/25
((433*45)/25) - ((935*62)/187)
(6-4)/ 4
9072 - (9072*0.11)
(9072 - (9072*0.11)) * 1.4
11303.71- (9072*0.11)
9 * 0.11
9 - (9 * 0.11)
8.01 * 1.4
11.214 - 8
40 / 1.25
774 - 722
(7.395 - 4462) /  4462
(7395 - 4462) /  4462
6*1.5
(437500) * 1.20
(437500) / (1.20 * 0.2)
(437500 * 100) / 20
((437500 * 100) / 20) / 1.2
setwd("~/Desktop/graph_challenge/day_19")
# Packages ----------------------------------------------------------------
library(data.table)
# Get Data ----------------------------------------------------------------
anime <- fread('dataanime.csv')
anime
head(anime)
anime[1]
anime[, start_date := as.Date(`Start airing`)]
anime[, .(Title, Genres)]
anime[, .(Title, unlist(strsplit(Genres, ','))[1]]
anime[, .(Title, unlist(strsplit(Genres, ','))[1])]
anime[, .(unlist(strsplit(Genres, ','))[1]), by = Title]
anime[, .(primary_genre = unlist(strsplit(Genres, ','))[1]), by = Title]
anime[, .(primary_genre = unlist(strsplit(Genres, ','))[1]), by = Title][anime, on = 'Title']
anime <- anime[, .(primary_genre = unlist(strsplit(Genres, ','))[1]), by = Title][anime, on = 'Title']
anime[, year := year(start_date)]
anime[, .N, by = .(year, primary_genre)]
anime_by_year_genre <- anime[, .N, by = .(year, primary_genre)]
devtools::install_github("hrbrmstr/streamgraph")
install.packages('devtools')
devtools::install_github("hrbrmstr/streamgraph")
library(streamgraph)
# Graph -------------------------------------------------------------------
library(dplyr)
ggplot2movies::movies %>%
select(year, Action, Animation, Comedy, Drama, Documentary, Romance, Short) %>%
tidyr::gather(genre, value, -year) %>%
group_by(year, genre) %>%
tally(wt=value) -> dat
?streamgraph
anime_by_year_genre
# Graph -------------------------------------------------------------------
streamgraph(anime, 'genre', 'N', 'year') >%
sg_axis_x(20, "year", "%Y")
# Graph -------------------------------------------------------------------
streamgraph(anime, 'genre', 'N', 'year') %>%
sg_axis_x(20, "year", "%Y")
# Graph -------------------------------------------------------------------
streamgraph(anime_by_year_genre, 'genre', 'N', 'year') %>%
sg_axis_x(20, "year", "%Y")
# Graph -------------------------------------------------------------------
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year') %>%
sg_axis_x(20, "year", "%Y")
# Graph -------------------------------------------------------------------
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year', interpolate = T) %>%
sg_axis_x(20, "year", "%Y")
streamgraph(anime_by_year_genre, "primary_genre", "N", "year", interactive=TRUE) %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_brewer("PuOr")
# Get Data ----------------------------------------------------------------
anime <- fread('dataanime.csv')
anime[, start_date := as.Date(`Start airing`)]
anime <- anime[, .(primary_genre = unlist(strsplit(Genres, ','))[1]), by = Title][anime, on = 'Title']
anime[, year := as.character(year(start_date))]
anime_by_year_genre <- anime[, .N, by = .(year, primary_genre)]
# Graph -------------------------------------------------------------------
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year', interpolate = T) %>%
sg_axis_x(20, "year", "%Y")
streamgraph(anime_by_year_genre, "primary_genre", "N", "year", interactive=TRUE) %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_brewer("PuOr")
install.packages('ggplot2movies')
ggplot2movies::movies %>%
select(year, Action, Animation, Comedy, Drama, Documentary, Romance, Short) %>%
tidyr::gather(genre, value, -year) %>%
group_by(year, genre) %>%
tally(wt=value) -> dat
dat
dat[, class(year)]
class(dat)
anime[, year := as.integer(year(start_date))]
anime_by_year_genre <- anime[, .N, by = .(year, primary_genre)]
sapply(anime_by_year_genre, class)
streamgraph(anime_by_year_genre, "primary_genre", "N", "year", interactive=TRUE)
anime_by_year_genre %>%
streamgraph("primary_genre", "N", "year")
ggplot2movies::movies %>%
select(year, Action, Animation, Comedy, Drama, Documentary, Romance, Short) %>%
tidyr::gather(genre, value, -year) %>%
group_by(year, genre) %>%
tally(wt=value) -> dat
streamgraph(anime_by_year_genre, "primary_genre", "N", "year", interactive=TRUE) %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_brewer("PuOr")
streamgraph(dat, "genre", "n", "year", interactive=TRUE) %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_brewer("PuOr")
sapply(movies)
sapply(dat, class)
anime_by_year_genre <- as.data.frame(anime[, .N, by = .(year, primary_genre)])
anime_by_year_genre %>%
streamgraph("primary_genre", "N", "year")
class(dat)
class(anime_by_year_genre)
anime_by_year_genre
anime_by_year_genre <- as.data.frame(anime[, .N, by = .(year, primary_genre)][!is.na(year)])
# Graph -------------------------------------------------------------------
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year', interpolate = T) %>%
sg_axis_x(20, "year", "%Y")
# Graph -------------------------------------------------------------------
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year', interpolate = T) %>%
sg_axis_x(20, "year", "%Y")  %>%
sg_fill_brewer("PuOr")
# Graph -------------------------------------------------------------------
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year', interpolate = True) %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_brewer("PuOr")
# Graph -------------------------------------------------------------------
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year', interactive = FALSE) %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_brewer("PuOr")
# Graph -------------------------------------------------------------------
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year', interactive = TRUE) %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_brewer("PuOr")
# Graph -------------------------------------------------------------------
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year', interactive = TRUE) %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_brewer("PuOr") %>%
sg_legend(show=TRUE, label="I- names: ")
?sg_fill_brewer
# Graph -------------------------------------------------------------------
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year', interactive = TRUE) %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_brewer("Spectral") %>%
sg_legend(show=TRUE, label="I- names: ")
# Graph -------------------------------------------------------------------
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year', interactive = TRUE) %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_brewer("Spectral") %>%
sg_legend(show=TRUE, label="Genres: ")
# Graph -------------------------------------------------------------------
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year', interactive = TRUE, offset="zero") %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_brewer("Spectral") %>%
sg_legend(show=TRUE, label="Genres: ")
# Graph -------------------------------------------------------------------
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year', interactive = TRUE, offset="zero") %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_brewer("Spectral") %>%
sg_legend(show=TRUE, label="Genres: ") %>%
sg_title('# Anime per Genre per Year')
g <- streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year', interactive = TRUE, offset="zero") %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_brewer("Spectral") %>%
sg_legend(show=TRUE, label="Genres: ") %>%
sg_title('# Anime per Genre per Year')
g
print(g)
# Graph -------------------------------------------------------------------
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year',
interactive = TRUE, offset="zero") %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_brewer("Spectral") %>%
sg_legend(show=TRUE, label="Genres: ")
# Graph -------------------------------------------------------------------
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year',
interactive = TRUE) %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_brewer("Spectral") %>%
sg_legend(show=TRUE, label="Genres: ")
anime_by_year_genre
anime_by_year_genre[, uniqueN("primary_genre")]
anime_by_year_genre[, unique("primary_genre")]
anime_by_year_genre[, uniqueN(primary_genre)]
uniqueN(anime_by_year_genre$primary_genre)
# Graph -------------------------------------------------------------------
mycolor <- colormap(colormap=colormaps$viridis, nshades=uniqueN(anime_by_year_genre$primary_genre))
library(colormap)
# Graph -------------------------------------------------------------------
mycolor <- colormap(colormap=colormaps$viridis, nshades=uniqueN(anime_by_year_genre$primary_genre))
mycolor <- sample(mycolor, length(mycolor))
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year',
interactive = TRUE) %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_manual(mycolor) %>%
sg_legend(show=TRUE, label="Genres: ")
# Graph -------------------------------------------------------------------
mycolor <- colormap(colormap=colormaps$rainbow_soft, nshades=uniqueN(anime_by_year_genre$primary_genre))
mycolor <- sample(mycolor, length(mycolor))
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year',
interactive = TRUE) %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_manual(mycolor) %>%
sg_legend(show=TRUE, label="Genres: ")
# Graph -------------------------------------------------------------------
mycolor <- colormap(colormap=colormaps$cool, nshades=uniqueN(anime_by_year_genre$primary_genre))
mycolor <- sample(mycolor, length(mycolor))
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year',
interactive = TRUE) %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_manual(mycolor) %>%
sg_legend(show=TRUE, label="Genres: ")
# Graph -------------------------------------------------------------------
mycolor <- colormap(colormap=colormaps$summer, nshades=uniqueN(anime_by_year_genre$primary_genre))
mycolor <- sample(mycolor, length(mycolor))
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year',
interactive = TRUE) %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_manual(mycolor) %>%
sg_legend(show=TRUE, label="Genres: ")
# Graph -------------------------------------------------------------------
mycolor <- colormap(colormap=colormaps$rainbow, nshades=uniqueN(anime_by_year_genre$primary_genre))
mycolor <- sample(mycolor, length(mycolor))
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year',
interactive = TRUE) %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_manual(mycolor) %>%
sg_legend(show=TRUE, label="Genres: ")
# Graph -------------------------------------------------------------------
mycolor <- colormap(colormap=colormaps$density, nshades=uniqueN(anime_by_year_genre$primary_genre))
mycolor <- sample(mycolor, length(mycolor))
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year',
interactive = TRUE) %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_manual(mycolor) %>%
sg_legend(show=TRUE, label="Genres: ")
# Graph -------------------------------------------------------------------
mycolor <- colormap(colormap=colormaps$autumn, nshades=uniqueN(anime_by_year_genre$primary_genre))
mycolor <- sample(mycolor, length(mycolor))
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year',
interactive = TRUE) %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_manual(mycolor) %>%
sg_legend(show=TRUE, label="Genres: ")
# Graph -------------------------------------------------------------------
mycolor <- colormap(colormap=colormaps$inferno, nshades=uniqueN(anime_by_year_genre$primary_genre))
mycolor <- sample(mycolor, length(mycolor))
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year',
interactive = TRUE) %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_manual(mycolor) %>%
sg_legend(show=TRUE, label="Genres: ")
# Graph -------------------------------------------------------------------
mycolor <- colormap(colormap=colormaps$magma, nshades=uniqueN(anime_by_year_genre$primary_genre))
mycolor <- sample(mycolor, length(mycolor))
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year',
interactive = TRUE) %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_manual(mycolor) %>%
sg_legend(show=TRUE, label="Genres: ")
# Graph -------------------------------------------------------------------
mycolor <- colormap(colormap=colormaps$cubehelix, nshades=uniqueN(anime_by_year_genre$primary_genre))
mycolor <- sample(mycolor, length(mycolor))
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year',
interactive = TRUE) %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_manual(mycolor) %>%
sg_legend(show=TRUE, label="Genres: ")
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year',
interactive = TRUE) %>%
sg_axis_x(20, "year", "%Y") %>%
sg_fill_brewer() %>%
sg_legend(show=TRUE, label="Genres: ")
colormaps
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year',
interactive = TRUE) %>%
sg_axis_x(10, "year", "%Y") %>%
sg_fill_brewer() %>%
sg_legend(show=TRUE, label="Genres: ")
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year',
interactive = TRUE) %>%
sg_axis_x(5, "year", "%Y") %>%
sg_fill_brewer() %>%
sg_legend(show=TRUE, label="Genres: ")
# Graph -------------------------------------------------------------------
mycolor <- colormap(colormap=colormaps$cubehelix, nshades=uniqueN(anime_by_year_genre$primary_genre))
mycolor <- sample(mycolor, length(mycolor))
streamgraph(anime_by_year_genre, 'primary_genre', 'N', 'year',
interactive = TRUE) %>%
sg_axis_x(5, "year", "%Y") %>%
sg_fill_manual(mycolor) %>%
sg_legend(show=TRUE, label="Genres: ")
