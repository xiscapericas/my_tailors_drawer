library(leaflet)
download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , destfile="DATA/world_shape_file.zip")
library(rgdal)
install.packages('rgdal')
library(rgdal)
world_spdf <- readOGR(
dsn= paste0(getwd(),"TM_WORLD_BORDERS_SIMPL-0.3/") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
install.packages('geojsonio')
library(geojsonio)
# Get Data ----------------------------------------------------------------
## GeoJson
world <- geojsonio::geojson_read("countries.geojson", what = "sp")
world
names(world)
class(world)
m <- leaflet(world)
m
m %>% addPolygons()
national_debt
names(world)
world$ADMIN[1]
world$ISO_A3
world$ADMIN
national_debt
## Add info
countries_world <- world$ADMIN
countries_world
national_debt[countries_world %in% country, .N]
countries_world
countries_world %in% national_debt[, country]
all(countries_world %in% national_debt[, country])
national_dept
national_debt
national_debt[, .(country, debt_gdp)][data.table(
country = countries_world),  on = 'country']
national_debt[, .(country, debt_gdp)][data.table(
country = countries_world),  on = 'country'][is.na(dbt_gdp), dbt_gdp := 0]
national_debt[, .(country, debt_gdp)][data.table(
country = countries_world),  on = 'country'][is.na(debt_gdp), debt_gdp := 0]
countries_world_gdp <- national_debt[, .(country, debt_gdp)][data.table(
country = countries_world),  on = 'country'][is.na(debt_gdp), debt_gdp := 0]
countries_world_gdp <- national_debt[, .(
country, debt_gdp)][data.table(
country =  world$ADMIN),  on = 'country'][
is.na(debt_gdp), debt_gdp := 0]
countries_world_gdp
countries_world_gdp
world$debt <- countries_world_gdp[, debt_gdp]
countries_world_gdp[, debt_gdp]
countries_world_gdp[, range(debt_gdp)]
countries_world_gdp[, cut(debt_gdp, quantile(debt_gdp, 0.1))]
countries_world_gdp[, cut(debt_gdp, quantile(debt_gdp, 0.1), 10)]
countries_world_gdp[, cut(debt_gdp, breaks = 10)]
countries_world_gdp[, cut(dept_gdb, breaks = quantile(dept_gdb, probs = seq(0, 1, 0.2)))]
countries_world_gdp[, cut(debt_gdp, breaks = quantile(debt_gdp, probs = seq(0, 1, 0.2)))]
countries_world_gdp[, cut(debt_gdp, unique(quantile(get(prob), seq(0, 1, length=10))), include.lowest=T)]
countries_world_gdp[, cut(debt_gdp, unique(quantile(debt_gdp, seq(0, 1, length=10))), include.lowest=T)]
countries_world_gdp[, cut_gdp := cut(debt_gdp, unique(quantile(debt_gdp, seq(0, 1, length=10))), include.lowest=T)]
countries_world_gdp
countries_world_gdp[, min(debt_gdp), by = cut_gdp]
countries_world_gdp[, min(debt_gdp), by = cut_gdp][order(-V1)]
countries_world_gdp[, min(debt_gdp), by = cut_gdp][order(V1)]
bins <- c(countries_world_gdp[, min(debt_gdp), by = cut_gdp][order(V1)], Inf)
pal <- colorBin("YlOrRd", domain = world$debt, bins = bins)
m <- leaflet(world)
m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
bins
## Colors
countries_world_gdp[, cut_gdp := cut(debt_gdp, unique(quantile(debt_gdp, seq(0, 1, length=10))), include.lowest=T)]
bins <- c(countries_world_gdp[, min(debt_gdp), by = cut_gdp][order(V1)], Inf)
bins
bins <- c(countries_world_gdp[, min(debt_gdp), by = cut_gdp][order(V1), V1], Inf)
bins
pal <- colorBin("YlOrRd", domain = world$debt, bins = bins)
m <- leaflet(world)
m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m %>% addPolygons(
fillColor = ~pal(debt),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m %>% addPolygons(
fillColor = ~pal(debt),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright")
m %>% addPolygons(
fillColor = ~pal(debt),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)) %>%
addLegend(pal = pal, values = ~debt, opacity = 0.7, title = NULL,
position = "bottomright")
m %>% addPolygons(
fillColor = ~pal(debt),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE,
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))) %>%
addLegend(pal = pal, values = ~debt, opacity = 0.7, title = NULL,
position = "bottomright")
m %>% addPolygons(
fillColor = ~pal(debt),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~debt, opacity = 0.7, title = NULL,
position = "bottomright")
## Labels
labels <- sprintf(
"<strong>%s</strong><br/>%g people / mi<sup>2</sup>",
world$ADMIN, world$debt
) %>% lapply(htmltools::HTML)
m %>% addPolygons(
fillColor = ~pal(debt),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~debt, opacity = 0.7, title = NULL,
position = "bottomright")
## Labels
labels <- sprintf(
"<strong>%s</strong><br/>%g %",
world$ADMIN, world$debt
) %>% lapply(htmltools::HTML)
## Labels
labels <- sprintf(
"<strong>%s</strong><br/>%g national dept to GDP ratio",
world$ADMIN, world$debt
) %>% lapply(htmltools::HTML)
labels
## Labels
labels <- sprintf(
"<strong>%s</strong><br/>%g \%national dept to GDP ratio",
world$ADMIN, world$debt
) %>% lapply(htmltools::HTML)
## Labels
labels <- sprintf(
"<strong>%s</strong><br/>%g \% national dept to GDP ratio",
world$ADMIN, world$debt
) %>% lapply(htmltools::HTML)
## Labels
labels <- sprintf(
"<strong>%s</strong><br/>%g \\% national dept to GDP ratio",
world$ADMIN, world$debt
) %>% lapply(htmltools::HTML)
## Labels
labels <- sprintf(
"<strong>%s</strong><br/>%g %% national dept to GDP ratio",
world$ADMIN, world$debt
) %>% lapply(htmltools::HTML)
labels
## Labels
labels <- sprintf(
"<strong>%s</strong><br/>%g%% national dept to GDP ratio",
world$ADMIN, world$debt
) %>% lapply(htmltools::HTML)
labels
scales::percent_format(world$debt)
world$debt
scales::percent(world$debt)
scales::percent(world$debt/100)
(world$debt)
(world$debt/100)
scales::percent(world$debt/100)
scales::percent(world$debt/100, accuracy = 2)
scales::percent(world$debt/100, accuracy = 3)
scales::percent(world$debt/100, accuracy = 4)
scales::percent(world$debt/100)
world$debt
## Labels
labels <- sprintf(
"<strong>%s</strong><br/>%g%% national dept to GDP ratio",
world$ADMIN, world$debt
) %>% lapply(htmltools::HTML)
m %>% addPolygons(
fillColor = ~pal(debt),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~debt, opacity = 0.7, title = NULL,
position = "bottomright")
pal <- colorBin("Spectral", domain = world$debt, bins = bins)
m %>% addPolygons(
fillColor = ~pal(debt),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~debt, opacity = 0.7, title = NULL,
position = "bottomright")
?colorBin
pal <- colorBin("Viridis", domain = world$debt, bins = bins)
## Labels
labels <- sprintf(
"<strong>%s</strong><br/>%g%% national dept to GDP ratio",
world$ADMIN, world$debt
) %>% lapply(htmltools::HTML)
m <- leaflet(world)
m %>% addPolygons(
fillColor = ~pal(debt),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~debt, opacity = 0.7, title = NULL,
position = "bottomright")
pal <- colorBin("Oranges", domain = world$debt, bins = bins)
## Labels
labels <- sprintf(
"<strong>%s</strong><br/>%g%% national dept to GDP ratio",
world$ADMIN, world$debt
) %>% lapply(htmltools::HTML)
m <- leaflet(world)
m %>% addPolygons(
fillColor = ~pal(debt),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~debt, opacity = 0.7, title = NULL,
position = "bottomright")
pal <- colorBin("OrRD", domain = world$debt, bins = bins)
pal <- colorBin("OrRd", domain = world$debt, bins = bins)
pal
# Graph -------------------------------------------------------------------
m <- leaflet(world)
m %>% addPolygons(
fillColor = ~pal(debt),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~debt, opacity = 0.7, title = NULL,
position = "bottomright")
# Packages ----------------------------------------------------------------
library(data.table)
library(ggplot2)
setwd("~/Desktop/graph_challenge/day_25")
# Get Data ----------------------------------------------------------------
lotr_data <- fread('datasets_49520_89994_lotr_characters.csv')
lotr_data
colnames(lotr_data)
head(lotr_data)
lotr_data[!is.na(height)]
lotr_data[height != ' ']
lotr_data[height != '']
# Get Data ----------------------------------------------------------------
heroes <- fread('../day_17/datasets_26532_33799_heroes_information.csv')
heroes
# Graph -------------------------------------------------------------------
heroes[, .N, by = Publisher]
# Graph -------------------------------------------------------------------
heroes[, .N, by = Publisher][N > 30, ]
# Graph -------------------------------------------------------------------
heroes[, .N, by = Publisher][N > 10, ]
ggplot(heroes[Publisher %in% Publisher], aes(x = Publisher, y = Height)) +
geom_violin()
ggplot(heroes[Publisher %in% Publisher], aes(x = Publisher, y = Height)) +
geom_violin() +
theme_bw() +
theme(axis.text.x = element_text(angle = 45))
ggplot(heroes[Publisher %in% publisher], aes(x = Publisher, y = Height)) +
geom_violin() +
theme_bw() +
theme(axis.text.x = element_text(angle = 45))
publisher
publisher <- heroes[Publisher != '', .N, by = Publisher][N > 10, Publisher]
publisher
ggplot(heroes[Publisher %in% publisher], aes(x = Publisher, y = Height)) +
geom_violin() +
theme_bw() +
theme(axis.text.x = element_text(angle = 45))
ggplot(heroes[Publisher %in% publisher], aes(x = Publisher, y = Height)) +
geom_violin() +
theme_bw() +
coord_flip()
ggplot(heroes[Publisher %in% publisher], aes(x = Publisher, y = Height, fill = Publisher)) +
geom_violin() +
theme_bw() +
coord_flip() +
scale_fill_brewer(palette="RdBu")
publisher <- heroes[Publisher != '', .N, by = Publisher][N > 15, Publisher]
ggplot(heroes[Publisher %in% publisher], aes(x = Publisher, y = Height, fill = Publisher)) +
geom_violin() +
theme_bw() +
coord_flip() +
scale_fill_brewer(palette="RdBu")
heroes
heroes[Publisher == 'NBC - Heroes']
publisher <- heroes[Height > 0][Publisher != '', .N, by = Publisher][N > 15, Publisher]
# Graph -------------------------------------------------------------------
ggplot(heroes[Publisher %in% publisher], aes(x = Publisher, y = Height, fill = Publisher)) +
geom_violin() +
theme_bw() +
coord_flip() +
scale_fill_brewer(palette="RdBu")
publisher <- heroes[Publisher != '', .N, by = Publisher][N > 15, Publisher]
# Graph -------------------------------------------------------------------
ggplot(heroes[Publisher %in% publisher], aes(x = Publisher, y = Height, fill = Publisher)) +
geom_violin() +
theme_bw() +
coord_flip() +
scale_fill_brewer(palette="RdBu")
publisher <- heroes[Publisher != '', .N, by = Publisher][N > 10, Publisher]
# Graph -------------------------------------------------------------------
ggplot(heroes[Publisher %in% publisher], aes(x = Publisher, y = Height, fill = Publisher)) +
geom_violin() +
theme_bw() +
coord_flip() +
scale_fill_brewer(palette="RdBu")
heroes
# Get Data ----------------------------------------------------------------
heroes <- fread('../day_17/datasets_26532_33799_heroes_information.csv')
# Get Data ----------------------------------------------------------------
mcdonalds <- fread('../day_17/datasets_26532_33799_heroes_information.csv')
mcdonalds
# Get Data ----------------------------------------------------------------
mcdonalds <- fread('../day_17/datasets_26532_33799_heroes_information.csv')
mcdonalds
# Get Data ----------------------------------------------------------------
mcdonalds <- fread('../day_25/datasets_910_1662_menu.csv')
mcdonalds
colnames(mcdonalds)
mcdonalds[, uniquen(Category)]
mcdonalds[, uniqueN(Category)]
# Graph -------------------------------------------------------------------
ggplot(mcdonalds, aes(x = Category, y = Calories, fill = Category)) +
geom_violin() +
theme_bw() +
coord_flip() +
scale_fill_brewer(palette="RdBu")
paleta_colores <- c('#ffc72c', '#fbb52a', '#ec7624', '#da291c',
'#b8281d', '#90271e', '#74261e', '#55261e',
'#27251f')
# Graph -------------------------------------------------------------------
ggplot(mcdonalds, aes(x = Category, y = Calories, fill = Category)) +
geom_violin() +
theme_bw() +
coord_flip() +
scale_fill_manual(values=paleta_colores)
# Graph -------------------------------------------------------------------
ggplot(mcdonalds, aes(x = Category, y = Calories, fill = Category)) +
geom_violin() +
theme_bw() +
coord_flip() +
scale_fill_manual(values=paleta_colores) +
labs(title = 'McDonalds: Calories per Product Category',
caption = 'By Xisca Pe')
# Graph -------------------------------------------------------------------
ggplot(mcdonalds, aes(x = Category, y = Calories, fill = Category)) +
geom_violin() +
theme_bw() +
coord_flip() +
scale_fill_manual(values=paleta_colores) +
theme(legend.position = 'bottom',
plot.title = element_text(hjust = 0.5, size = 20, family = 'Arial', face = 'bold'),
plot.caption = element_text(family = 'Arial')) +
labs(title = 'McDonalds: Calories per Product Category',
caption = 'By Xisca Pe')
# Graph -------------------------------------------------------------------
ggplot(mcdonalds, aes(x = Category, y = Calories, fill = Category)) +
geom_violin(trim=FALSE) +
geom_boxplot(width=0.1, fill="white") +
theme_bw() +
coord_flip() +
scale_fill_manual(values=paleta_colores) +
theme(legend.position = 'bottom',
plot.title = element_text(hjust = 0.5, size = 20, family = 'Arial', face = 'bold'),
plot.caption = element_text(family = 'Arial')) +
labs(title = 'McDonalds: Calories per Product Category',
caption = 'By Xisca Pe')
mcdonalds[which.max(Calories)]
mcdonalds[which.max(Calories), Item]
mcdonalds[which.max(Calories), .(Item, Calories]
mcdonalds[which.max(Calories), .(Item, Calories)]
## Help:
mcdonalds[which.max(Calories), .(Item, Calories)]
