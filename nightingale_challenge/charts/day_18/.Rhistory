pt_sub[, unique(categoria)]
bcnIcons <- iconList(
biblioteca = makeIcon("book_library_icon.jpg", 25, 25),
musica = makeIcon("illuminate-music-note-icon-png-clipart.jpg", 25, 25),
punto_verde = makeIcon("png-transparent-recycling-symbol-logo-decal-plastic-recycling-symbol-angle-leaf-label.png", 25, 25),
infantil = makeIcon("toy-infant-child-icon-maternal-and-child-toys.jpg", 25, 25)
)
pt_sub[, unique(categoria)]
data.table(categoria = pt_sub[, unique(categoria)],
icon = c('biblioteca', 'musica', 'punto_verde', 'infantil'))
data.table(categoria = pt_sub[, unique(categoria)],
icon = c('biblioteca', 'musica', 'punto_verde', 'infantil'))[pt_sub, on = 'categoria']
pt_sub <- data.table(categoria = pt_sub[, unique(categoria)],
icon = c('biblioteca', 'musica', 'punto_verde', 'infantil'))[pt_sub, on = 'categoria']
bcnIcons <- iconList(
biblioteca = makeIcon("book_library_icon.jpg", 25, 25),
musica = makeIcon("illuminate-music-note-icon-png-clipart.jpg", 25, 25),
punto_verde = makeIcon("png-transparent-recycling-symbol-logo-decal-plastic-recycling-symbol-angle-leaf-label.png", 25, 25),
infantil = makeIcon("toy-infant-child-icon-maternal-and-child-toys.jpg", 25, 25)
)
m <- leaflet(data = pt_sub[sample(100)])
m <- addTiles(m)
m <- addMarkers(m, lng=~longitud, lat=~latitude,
popup=~equipment, icon = bcnIcons[~icon])
m
m <- leaflet(data = pt_sub[sample(100)])
m <- addTiles(m)
bcnIcons
m <- addMarkers(m, lng=~longitud, lat=~latitude,
popup=~equipment, icon = bcnIcons[~icon])
m <- addMarkers(m, lng=~longitud, lat=~latitude,
popup=~equipment, icon = ~bcnIcons[icon])
m
pt_sub
pt_sub[, icon := as.factor(icon)]
bcnIcons <- iconList(
biblioteca = makeIcon("book_library_icon.jpg", 25, 25),
musica = makeIcon("illuminate-music-note-icon-png-clipart.jpg", 25, 25),
punto_verde = makeIcon("png-transparent-recycling-symbol-logo-decal-plastic-recycling-symbol-angle-leaf-label.png", 25, 25),
infantil = makeIcon("toy-infant-child-icon-maternal-and-child-toys.jpg", 25, 25)
)
m <- leaflet(data = pt_sub[sample(100)])
m <- addTiles(m)
m <- addMarkers(m, lng=~longitud, lat=~latitude,
popup=~equipment, icon = ~bcnIcons[icon])
m
bcnIcons
pt_sub <- puntos_mapa[, .(equipment = EQUIPAMENT, latitude = LATITUD, longitud = LONGITUD, categoria)][!duplicated(equipment)]
pt_sub <- data.table(categoria = pt_sub[, unique(categoria)],
type = c('biblioteca', 'musica', 'punto_verde', 'infantil'))[pt_sub, on = 'categoria']
pt_sub[, type := as.factor(icon)]
bcnIcons <- iconList(
biblioteca = makeIcon("book_library_icon.jpg", 25, 25),
musica = makeIcon("illuminate-music-note-icon-png-clipart.jpg", 25, 25),
punto_verde = makeIcon("png-transparent-recycling-symbol-logo-decal-plastic-recycling-symbol-angle-leaf-label.png", 25, 25),
infantil = makeIcon("toy-infant-child-icon-maternal-and-child-toys.jpg", 25, 25)
)
m <- leaflet(data = pt_sub[sample(100)])
m <- addTiles(m)
m <- addMarkers(m, lng=~longitud, lat=~latitude,
popup=~equipment, icon = ~bcnIcons[icon])
m <- addMarkers(m, lng=~longitud, lat=~latitude,
popup=~equipment, icon = ~bcnIcons[type])
m
pt_sub[sample(100)]
pt_sub
m <- leaflet(data = pt_sub[sample(100)])
m <- addTiles(m)
m <- addMarkers(m, lng=~longitud, lat=~latitude,
popup=~equipment, icon = libraryIcon)
m
musicIcon <- makeIcon(
iconUrl = "illuminate-music-note-icon-png-clipart.jpg",
iconWidth = 25, iconHeight = 25
)
m <- leaflet(data = pt_sub[sample(100)])
m <- addTiles(m)
m <- addMarkers(m, lng=~longitud, lat=~latitude,
popup=~equipment, icon = musicIcon)
m
musicIcon <- makeIcon(
iconUrl = "computer-icons-musical-note-music-download-musical-theatre-musical-note.jpg",
iconWidth = 25, iconHeight = 25
)
m <- leaflet(data = pt_sub[sample(100)])
m <- addTiles(m)
m <- addMarkers(m, lng=~longitud, lat=~latitude,
popup=~equipment, icon = musicIcon)
m
m
ptoVerde <- makeIcon(
iconUrl = "png-transparent-recycling-symbol-logo-decal-plastic-recycling-symbol-angle-leaf-label.png",
iconWidth = 25, iconHeight = 25
)
m <- leaflet(data = pt_sub[sample(100)])
m <- addTiles(m)
m <- addMarkers(m, lng=~longitud, lat=~latitude,
popup=~equipment, icon = ptoVerde)
m
infantil <- makeIcon(
iconUrl = "toy-infant-child-icon-maternal-and-child-toys.jpg",
iconWidth = 25, iconHeight = 25
)
m <- leaflet(data = pt_sub[sample(100)])
m <- addTiles(m)
m <- addMarkers(m, lng=~longitud, lat=~latitude,
popup=~equipment, icon = ptoVerde)
m
infantilIcon <- makeIcon(
iconUrl = "toy-infant-child-icon-maternal-and-child-toys.jpg",
iconWidth = 25, iconHeight = 25
)
m <- leaflet(data = pt_sub[sample(100)])
m <- addTiles(m)
m <- addMarkers(m, lng=~longitud, lat=~latitude,
popup=~equipment, icon = infantilIcon)
m
infantilIcon <- makeIcon(
iconUrl = "children-icon-png-11552333605ypbqejojqg.png",
iconWidth = 25, iconHeight = 25
)
m <- leaflet(data = pt_sub[sample(100)])
m <- addTiles(m)
m <- addMarkers(m, lng=~longitud, lat=~latitude,
popup=~equipment, icon = infantilIcon)
m
m <- leaflet(data = pt_sub[sample(100)])
m <- addTiles(m)
m <- addMarkers(m, lng=~longitud, lat=~latitude,
popup=~equipment, icon = infantilIcon)
m <- addProviderTiles(providers$MtbMap)
m
providers
m <- addProviderTiles(providers$MtbMap)
m <- addProviderTiles(providers$OpenStreetMap)
m %>% addProviderTiles(providers$CartoDB.Positron)
bcnIcons <- iconList(
biblioteca = libraryIcon,
musica = musicIcon,
punto_verde = ptoVerde,
infantil = infantilIcon
)
m <- leaflet(data = pt_sub[sample(100)])
m <- addTiles(m)
m <- addMarkers(m, lng=~longitud, lat=~latitude,
popup=~equipment, icon = ~bcnIcons[type])
m %>% addProviderTiles(providers$CartoDB.Positron)
m <- leaflet(data = pt_sub[sample(100)])
m <- addTiles(m)
m <- addMarkers(m, lng=~longitud, lat=~latitude,
popup=~equipment, icon = ~bcnIcons[type])
m %>% addProviderTiles(providers$CartoDB.Positron)
m %>% addProviderTiles(providers$MtbMap) %>%
addProviderTiles(providers$Stamen.TonerLines,
options = providerTileOptions(opacity = 0.35)) %>%
addProviderTiles(providers$Stamen.TonerLabels)
m <- leaflet(data = pt_sub[sample(100)])
m <- addTiles(m)
m <- addMarkers(m, lng=~longitud, lat=~latitude,
popup=~equipment, icon = ~bcnIcons[type])
m %>% addProviderTiles(providers$MtbMap) %>%
addProviderTiles(providers$Stamen.TonerLines,
options = providerTileOptions(opacity = 0.35))
m %>% addProviderTiles(providers$MtbMap) %>%
addProviderTiles(providers$Stamen.TonerLines)
m %>% addProviderTiles(providers$MtbMap)
m %>% addProviderTiles(providers$CartoDB.Positron) %>%
addProviderTiles(providers$Stamen.TonerLines)
m %>% addProviderTiles(providers$CartoDB.Positron) %>%
addProviderTiles(providers$Stamen.TonerLines) %>%
addProviderTiles(providers$Stamen.TonerLabels)
m1 <- leaflet(data = pt_sub[sample(100)]) %>% addTiles() %>% addMarkers(m, lng=~longitud, lat=~latitude,
popup=~equipment, icon = ~bcnIcons[type])
m1
m1 <- leaflet(data = pt_sub[sample(100)])
m1 <- leaflet(data = pt_sub[sample(100)]) %>%
addTiles() %>%
addMarkers(m, lng=~longitud, lat=~latitude, popup=~equipment, icon = ~bcnIcons[type]) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addProviderTiles(providers$Stamen.TonerLines) %>%
addProviderTiles(providers$Stamen.TonerLabels)
m1
m2 <- leaflet(data = pt_sub[sample(100)]) %>%
addTiles() %>%
addMarkers(m, lng=~longitud, lat=~latitude, popup=~equipment, icon =musicIcon) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addProviderTiles(providers$Stamen.TonerLines) %>%
addProviderTiles(providers$Stamen.TonerLabels)
m2
layout(matrix(c(1,1,2,3), 1, 1, byrow = TRUE))
m1
m2
par(mfrow=c(2,2), mar=c(1,1,1,1))
m1
m2
clas(m1)
class(m1)
combineWidgets <- function(..., list = NULL, nrow = NULL, ncol = NULL, title = NULL,
rowsize = 1, colsize = 1, byrow = TRUE,
titleCSS = "",
header = NULL, footer = NULL,
leftCol = NULL, rightCol = NULL,
width = NULL, height = NULL) {
widgets <- c(list(...), list)
if (length(widgets) == 0) return(combineWidgets(""))
# create empty widget
res <- htmlwidgets::createWidget(
name = 'combineWidgets',
x = NULL,
width = width,
height = height,
package = 'manipulateWidget',
sizingPolicy = htmlwidgets::sizingPolicy(
browser.fill = TRUE
),
preRenderHook = preRenderCombinedWidgets
)
# Add dependencies of embedded widgets or shiny tags
# This works through the widgets recursively, in case
# we were passed a shiny.tag.list or other list of
# non-widgets.
getDeps <- function(x) {
if (!is.null(attr(x, "package")))
append(tryCatch(getDependency(class(x)[1], attr(x, "package")),
error = function(e) NULL), x$dependencies)
else if (!is.null(attr(x, "html_dependencies")))
attr(x, "html_dependencies")
else if (is.list(x))
do.call(c, lapply(x, getDeps))
}
deps <- c(getDeps(widgets),
getDeps(header),
getDeps(footer),
getDeps(leftCol),
getDeps(rightCol))
res$dependencies <- deps
# Add widget list and parameters
res$widgets <- widgets
res$params <- list(
nrow = nrow,
ncol = ncol,
title = title,
rowsize = rowsize,
colsize = colsize,
byrow = byrow,
titleCSS = titleCSS,
header = header,
footer = footer,
leftCol = leftCol,
rightCol = rightCol,
width = width,
height = height
)
res
}
#' Shiny bindings for combineWidgets
#'
#' Output and render functions for using combineWidgets within Shiny
#' applications and interactive Rmd documents.
#'
#' @param outputId output variable to read from
#' @param width,height Must be a valid CSS unit (like \code{'100\%'},
#'   \code{'400px'}, \code{'auto'}) or a number, which will be coerced to a
#'   string and have \code{'px'} appended.
#' @param expr An expression that generates a combineWidgets
#' @param env The environment in which to evaluate \code{expr}.
#' @param quoted Is \code{expr} a quoted expression (with \code{quote()})? This
#'   is useful if you want to save an expression in a variable.
#'
#' @name combineWidgets-shiny
#'
#' @export
combineWidgetsOutput <- function(outputId, width = '100%', height = '400px'){
htmlwidgets::shinyWidgetOutput(outputId, 'combineWidgets', width, height, package = 'manipulateWidget')
}
#' @rdname combineWidgets-shiny
#' @export
renderCombineWidgets <- function(expr, env = parent.frame(), quoted = FALSE) {
if (!quoted) { expr <- substitute(expr) } # force quoted
htmlwidgets::shinyRenderWidget(expr, combineWidgetsOutput, env, quoted = TRUE)
}
# Private function used to prerender a combinedWidgets object
preRenderCombinedWidgets <- function(x) {
hasCrosstalkInputs <- any(unlist(lapply(x$widgets, isCrosstalkInput)))
widgets <- lapply(unname(x$widgets), function(w) {
if (is.atomic(w)) return(structure(list(x = as.character(w)), class = "html"))
if (is.null(w$preRenderHook)) {
if (is(w, "htmlwidget")) return(w)
else return(structure(list(x = as.character(w)), class = "html"))
}
w$preRenderHook(w)
})
nwidgets <- length(x$widgets)
# Get number of rows and cols
dims <- .getRowAndCols(nwidgets, x$params$nrow, x$params$ncol)
nrow <- dims$nrow
ncol <- dims$ncol
ncells <- nrow * ncol
# Relative size of rows and cols
rowsize <- rep(x$params$rowsize, length.out = nrow)
colsize <- rep(x$params$colsize, length.out = ncol)
# Get the html ID of each widget
if (!is.null(names(x$widgets))) {
elementId <- names(x$widgets)
elementId[elementId == ""] <- "widget"
elementId <- make.unique(elementId)
} else {
elementId <- sapply(widgets[1:ncells], function(w) {
if (is.null(w)) res <- NULL
else res <- w$elementId
if (is.null(res)) res <- paste0("widget", floor(stats::runif(1, max = 1e9)))
res
})
}
# Get the HTML class for each widget, plus "cw-widget"
elementClass <- sapply(widgets[1:ncells], function(w) {
result <- NULL
if (inherits(w, "htmlwidget"))
result <- class(w)[1]
else if (inherits(w, "shiny.tag"))
result <- tagGetAttribute(w, "class")
paste(result, "cw-widget", "html-widget-static-bound")
})
# Construct the html of the combined widget
dirClass <- ifelse(x$params$byrow, "cw-by-row", "cw-by-col")
widgetEL <- mapply(
function(id, size, class) {
sprintf('<div class="cw-col" style="flex:%s;-webkit-flex:%s">
<div id="%s" class="%s" style="width:100%%;height:100%%"></div>
</div>',
size, size, id, class)
},
id = elementId,
size = rep(colsize, length.out = ncells),
class = elementClass
)
rowsEl <- lapply(1:nrow, function(i) {
content <- widgetEL[((i-1) * ncol + 1):(i * ncol)]
sprintf('<div class="cw-row %s" style="flex:%s;-webkit-flex:%s">%s</div>',
dirClass, rowsize[i], rowsize[i], paste(content, collapse = ""))
})
content <- sprintf('<div class="cw-content %s">%s</div>',
dirClass, paste(rowsEl, collapse = ""))
if(!is.null(x$params$title) && !x$params$title == "") {
titleEl <- sprintf('<div><h2 class="cw-title" style="%s">%s</h2></div>',
x$params$titleCSS, x$params$title)
} else {
titleEl <- ""
}
if (is.null(x$params$footer)) footer <- ""
else footer <- paste0("<div>", x$params$footer, "</div>")
if (is.null(x$params$header)) header <- ""
else header <- paste0("<div>", x$params$header, "</div>")
if (is.null(x$params$leftCol)) leftCol <- ""
else leftCol <- paste0("<div style='height:100%'>", x$params$leftCol, "</div>")
if (is.null(x$params$rightCol)) rightCol <- ""
else rightCol <- paste0("<div style='height:100%'>", x$params$rightCol, "</div>")
html <- sprintf('<div class="cw-container">%s%s<div class="cw-subcontainer">%s%s%s</div>%s</div>',
titleEl, header, leftCol, content, rightCol, footer)
data <- lapply(widgets, function(w) w$x)
widgetType <- sapply(widgets, function(w) class(w)[1])
x$x <- list(data = data, widgetType = widgetType, elementId = elementId, html = html,
hasCrosstalkInputs = hasCrosstalkInputs);
x
}
# Check whether a widget is a crosstalk-package input, which will need special
# initialization within combineWidgets()
isCrosstalkInput <- function(w) {
inherits(w, "shiny.tag") &&
!is.null(w$attribs) &&
grepl("crosstalk-input", w$attribs$class)
}
combineWidgets(title = "The Iris dataset", m1, m2)
install.packages("manipulateWidget")
library(manipulateWidget)
combineWidgets(title = "The Iris dataset", m1, m2)
manipulateWidget::combineWidgets(m1, m2)
bcnIcons <- iconList(
biblioteca = libraryIcon,
music = musicIcon,
punto_verde = ptoVerdeIcon,
infantil = infantilIcon
)
libraryIcon <- makeIcon(
iconUrl = "book_library_icon.jpg",
iconWidth = 25, iconHeight = 25
)
musicIcon <- makeIcon(
iconUrl = "computer-icons-musical-note-music-download-musical-theatre-musical-note.jpg",
iconWidth = 25, iconHeight = 25
)
ptoVerdeIcon <- makeIcon(
iconUrl = "png-transparent-recycling-symbol-logo-decal-plastic-recycling-symbol-angle-leaf-label.png",
iconWidth = 25, iconHeight = 25
)
infantilIcon <- makeIcon(
iconUrl = "children-icon-png-11552333605ypbqejojqg.png",
iconWidth = 25, iconHeight = 25
)
bcnIcons <- iconList(
biblioteca = libraryIcon,
music = musicIcon,
punto_verde = ptoVerdeIcon,
infantil = infantilIcon
)
bcnIcons
pt_sub[, unique(categoria)]
pt_sub[categoria == categoria_i, unique(type)]
pt_sub[categoria == categoria_i, unique(type)] <- 'Biblioteques_i_museus'
my_icon <- bcnIcons[[pt_sub[categoria == categoria_i, unique(type)]]]
my_icon
categoria_i
categoria_i <- 'Espais_de_musica_i_copes'
my_icon <- bcnIcons[[pt_sub[categoria == categoria_i, unique(type)]]]
my_icon
pt_sub[categoria == categoria_i, unique(type)]
bcnIcons <- iconList(
biblioteca = libraryIcon,
musica = musicIcon,
punto_verde = ptoVerdeIcon,
infantil = infantilIcon
)
my_icon <- bcnIcons[[pt_sub[categoria == categoria_i, unique(type)]]]
my_icon
maps_l <- lapply(pt_sub[, unique(categoria)], function(categoria_i) {
my_icon <- bcnIcons[[pt_sub[categoria == categoria_i, unique(type)]]]
leaflet(data = pt_sub[categoria == categoria_i]) %>%
addTiles() %>%
addMarkers(m, lng=~longitud, lat=~latitude, popup=~equipment, icon = my_icon) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addProviderTiles(providers$Stamen.TonerLines) %>%
addProviderTiles(providers$Stamen.TonerLabels)
})
maps_l
manipulateWidget::combineWidgets(maps_l)
manipulateWidget::combineWidgets(maps_l)
manipulateWidget::combineWidgets(maps_l[[1]], maps_l[[2]], maps_l[[3]], maps_l[[4]])
?combineWidgets
manipulateWidget::combineWidgets(maps_l[[1]], maps_l[[2]], maps_l[[3]], maps_l[[4]],
title = 'Puntos de interes BCN')
pt_sub[, unique(categoria)]
# Packages ----------------------------------------------------------------
library(data.table)
library(leaflet)
library(manipulateWidget)
# Get Data ----------------------------------------------------------------
puntos_mapa <- rbindlist(lapply(list.files(getwd()), function(file) {
fread(file)[, file_n := file]
}))
puntos_mapa[, categoria := gsub('([A-Z][0-9]{3}_)(.*)(.csv)','\\2',file_n)]
pt_sub <- puntos_mapa[, .(equipment = EQUIPAMENT, latitude = LATITUD, longitud = LONGITUD, categoria)][!duplicated(equipment)]
pt_sub <- data.table(categoria = pt_sub[, unique(categoria)],
type = c('biblioteca', 'musica', 'infantil', 'punto_verde'))[pt_sub, on = 'categoria']
pt_sub[, type := as.factor(icon)]
# Graph -------------------------------------------------------------------
## ICONS
libraryIcon <- makeIcon(
iconUrl = "book_library_icon.jpg",
iconWidth = 25, iconHeight = 25
)
musicIcon <- makeIcon(
iconUrl = "computer-icons-musical-note-music-download-musical-theatre-musical-note.jpg",
iconWidth = 25, iconHeight = 25
)
ptoVerdeIcon <- makeIcon(
iconUrl = "png-transparent-recycling-symbol-logo-decal-plastic-recycling-symbol-angle-leaf-label.png",
iconWidth = 25, iconHeight = 25
)
infantilIcon <- makeIcon(
iconUrl = "children-icon-png-11552333605ypbqejojqg.png",
iconWidth = 25, iconHeight = 25
)
bcnIcons <- iconList(
biblioteca = libraryIcon,
musica = musicIcon,
punto_verde = ptoVerdeIcon,
infantil = infantilIcon
)
maps_l <- lapply(pt_sub[, unique(categoria)], function(categoria_i) {
my_icon <- bcnIcons[[pt_sub[categoria == categoria_i, unique(type)]]]
leaflet(data = pt_sub[categoria == categoria_i]) %>%
addTiles() %>%
addMarkers(m, lng=~longitud, lat=~latitude, popup=~equipment, icon = my_icon) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addProviderTiles(providers$Stamen.TonerLines) %>%
addProviderTiles(providers$Stamen.TonerLabels)
})
manipulateWidget::combineWidgets(maps_l[[1]], maps_l[[2]], maps_l[[3]], maps_l[[4]],
title = 'Puntos de interes BCN')
maps_l <- lapply(pt_sub[, unique(categoria)], function(categoria_i) {
my_icon <- bcnIcons[[pt_sub[categoria == categoria_i, unique(type)]]]
leaflet(data = pt_sub[categoria == categoria_i]) %>%
addTiles() %>%
addMarkers(m, lng=~longitud, lat=~latitude, popup=~equipment, icon = my_icon) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addProviderTiles(providers$Stamen.TonerLines, options = providerTileOptions(opacity = 0.35)) %>%
addProviderTiles(providers$Stamen.TonerLabels)
})
manipulateWidget::combineWidgets(maps_l[[1]], maps_l[[2]], maps_l[[3]], maps_l[[4]],
title = 'Puntos de interes BCN')
maps_l <- lapply(pt_sub[, unique(categoria)], function(categoria_i) {
my_icon <- bcnIcons[[pt_sub[categoria == categoria_i, unique(type)]]]
leaflet(data = pt_sub[categoria == categoria_i]) %>%
addTiles() %>%
addMarkers(m, lng=~longitud, lat=~latitude, popup=~equipment, icon = my_icon) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addProviderTiles(providers$Stamen.TonerLines, options = providerTileOptions(opacity = 0.5)) %>%
addProviderTiles(providers$Stamen.TonerLabels)
})
manipulateWidget::combineWidgets(maps_l[[1]], maps_l[[2]], maps_l[[3]], maps_l[[4]],
title = 'Puntos de interes BCN')
providers
