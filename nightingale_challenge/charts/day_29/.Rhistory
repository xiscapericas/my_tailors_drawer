result[grepl('poke', element)]
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
data_for_graph
data_for_graph[order(domain)]
data_for_graph[order(element, domain)]
## Graph
graph <- graph_from_data_frame(d = data_for_graph[order(element, domain)], vertices = element_d, directed = F)
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Graph -------------------------------------------------------------------
my_elements <- sample(result[domain != ''][, unique(element)], 10)
data_for_graph <- result[element %in% my_elements, .(element, target, domain)][order(element, domain)]
## Elements dt
elements_dt <- data.table(element = unique(c(data_for_graph$element, data_for_graph$target)))
### With domain info
element_d <- result[, .(element, domain)][elements_dt, on = 'element']
element_d <- element_d[!duplicated(element_d)]
## Graph
graph <- graph_from_data_frame(d = data_for_graph, vertices = element_d, directed = F)
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$spring, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
my_elements <- sample(result[domain != ''][, unique(element)], 8)
data_for_graph <- result[element %in% my_elements, .(element, target, domain)][order(element, domain)]
## Elements dt
elements_dt <- data.table(element = unique(c(data_for_graph$element, data_for_graph$target)))
### With domain info
element_d <- result[, .(element, domain)][elements_dt, on = 'element']
element_d <- element_d[!duplicated(element_d)]
## Graph
graph <- graph_from_data_frame(d = data_for_graph, vertices = element_d, directed = F)
# Color
mycolor <- colormap(colormap=colormaps$spring, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$viridis, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
library(data.table)
c(rep('privately', 4), rep('government',4)),
235/(235+36)
300/(300+45)
(30+45)
1*(1.05)
2*(1.05)
1*(1.05) + 2*(1.05)
6+5+2+1
6+5+(1*1.05)+(2*1.05)
6+5+(1*1.05)+(2*1.05) / 6+5+2+1
(6+5+(1*1.05)+(2*1.05) - 6+5+2+1) / (6+5+2+1)
1105+53
948+105
400*(1.07)
(400+400*0.07)
4/20
1105/53
53/1105
948/105
3159/1054
214000/50
(214000*62)/50
175000*0.1
175000*0.35
(0.1*175000)
175000/0.1
(175000/0.1)*0.35
85/1.25
76/1.35
160/0.68
81/1.07
43/2.40
14.000*0.04
14000*0.04
560*3
13000*0.04
(13000-(13000*0.04))-((13000-(13000*0.04))*0.04)
(433*45)/25
((433*45)/25) - ((935*62)/187)
(6-4)/ 4
9072 - (9072*0.11)
(9072 - (9072*0.11)) * 1.4
11303.71- (9072*0.11)
9 * 0.11
9 - (9 * 0.11)
8.01 * 1.4
11.214 - 8
40 / 1.25
774 - 722
(7.395 - 4462) /  4462
(7395 - 4462) /  4462
6*1.5
(437500) * 1.20
(437500) / (1.20 * 0.2)
(437500 * 100) / 20
((437500 * 100) / 20) / 1.2
# Packages ----------------------------------------------------------------
library(data.table)
library(GGally)
library(viridis)
setwd("~/Desktop/graph_challenge/day_29")
# Data --------------------------------------------------------------------
mcdonalds <- fread('../day_25/datasets_910_1662_menu.csv')
## Size
mcdonalds[, size := as.numeric(gsub("(.* oz \\()([0-9]{2,4})(.*)", '\\2', `Serving Size`))]
mcdonalds_sub <- mcdonalds[, .(category = as.factor(Category), size, calories = Calories,
total_fat = `Total Fat`, cholesterol = Cholesterol,
sugars = Sugars, protein = Protein)][!is.na(size)][category != 'Beverages']
mcdonalds_sub
# Graph -------------------------------------------------------------------
# Plot
ggparcoord(mcdonalds_sub,
columns = 2:6, groupColumn = 1, order = "anyClass",
showPoints = TRUE,
title = "Parallel Coordinate Plot for McFlurry",
alphaLines = 0.8) +
theme_bw() +
theme(
plot.title = element_text(size=10)
)
# Graph -------------------------------------------------------------------
# Plot
ggparcoord(mcdonalds_sub,
columns = 2:3, groupColumn = 1, order = "anyClass",
showPoints = TRUE,
title = "Parallel Coordinate Plot for McFlurry",
alphaLines = 0.8) +
theme_bw() +
theme(
plot.title = element_text(size=10)
)
## McFluries
mcflurry <- mcdonalds[grepl('McFlurry', Item)]
mcflurry_sub <- mcflurry[, .(item = Item, size, calories = Calories,
total_fat = `Total Fat`, cholesterol = Cholesterol,
sugars = Sugars, protein = Protein)]
## Conversion
mcflurry_sub[, item := as.factor(item)]
# Graph -------------------------------------------------------------------
# Plot
ggparcoord(mcflurry_sub,
columns = 2:3, groupColumn = 1, order = "anyClass",
showPoints = TRUE,
title = "Parallel Coordinate Plot for McFlurry",
alphaLines = 0.8) +
theme_bw() +
theme(
plot.title = element_text(size=10)
)
# Graph -------------------------------------------------------------------
# Plot
ggparcoord(mcflurry_sub,
columns = 2:6, groupColumn = 1, order = "anyClass",
showPoints = TRUE,
title = "Parallel Coordinate Plot for McFlurry",
alphaLines = 0.8) +
theme_bw() +
theme(
plot.title = element_text(size=10)
)
# Graph -------------------------------------------------------------------
# Plot
ggparcoord(mcflurry_sub,
columns = 2:6, groupColumn = 1, order = "anyClass",
showPoints = TRUE,
title = "Parallel Coordinate Plot for McFlurry",
alphaLines = 0.8) +
theme_bw() +
scale_fill_viridis(discrete = T, option = 'B') +
theme(
plot.title = element_text(size=10)
)
mcflurry_sub[, .N]
## McDonalds paleta
paleta_colores <- c('#ffc72c', '#fbb52a', '#ec7624', '#da291c',
'#b8281d', '#90271e', '#74261e', '#55261e',
'#27251f')
# Graph -------------------------------------------------------------------
# Plot
ggparcoord(mcflurry_sub,
columns = 2:6, groupColumn = 1, order = "anyClass",
showPoints = TRUE,
title = "Parallel Coordinate Plot for McFlurry",
alphaLines = 0.8) +
theme_bw() +
scale_fill_manual(values = paleta_colores) +
theme(
plot.title = element_text(size=10)
)
# Graph -------------------------------------------------------------------
# Plot
ggparcoord(mcflurry_sub,
columns = 2:6, groupColumn = 1, order = "anyClass",
showPoints = TRUE,
title = "Parallel Coordinate Plot for McFlurry",
alphaLines = 0.8) +
theme_bw() +
scale_color_manual(values = paleta_colores) +
theme(
plot.title = element_text(size=10)
)
?ggparcoord
# Graph -------------------------------------------------------------------
# Plot
ggparcoord(mcflurry_sub,
columns = 2:6, groupColumn = 1, order = "anyClass",
shadeBox = T,
showPoints = TRUE,
title = "Parallel Coordinate Plot for McFlurry",
alphaLines = 0.8) +
theme_bw() +
scale_color_manual(values = paleta_colores) +
theme(
plot.title = element_text(size=10)
)
paleta_colores[9]
# Graph -------------------------------------------------------------------
# Plot
ggparcoord(mcflurry_sub,
columns = 2:6, groupColumn = 1, order = "anyClass",
shadeBox = paleta_colores[9],
showPoints = TRUE,
title = "Parallel Coordinate Plot for McFlurry",
alphaLines = 0.8) +
theme_bw() +
scale_color_manual(values = paleta_colores) +
theme(
plot.title = element_text(size=10)
)
# Graph -------------------------------------------------------------------
# Plot
ggparcoord(mcflurry_sub,
columns = 2:6, groupColumn = 1, order = "anyClass",
showPoints = TRUE,
title = "Parallel Coordinate Plot for McFlurry",
alphaLines = 0.8) +
theme_bw() +
scale_color_manual(values = paleta_colores) +
theme(legend.position = 'bottom',
plot.title = element_text(hjust = 0.5, size = 20, family = 'Arial', face = 'bold'),
plot.caption = element_text(family = 'Arial')) +
labs(caption = 'By Xisca Pe')
# Graph -------------------------------------------------------------------
# Plot
ggparcoord(mcflurry_sub,
columns = 2:6, groupColumn = 1, order = "anyClass",
showPoints = TRUE,
title = "Parallel Coordinate Plot for McFlurry",
alphaLines = 0.8) +
theme_bw() +
scale_color_manual(values = paleta_colores) +
theme(legend.position = 'top',
plot.title = element_text(hjust = 0.5, size = 20, family = 'Arial', face = 'bold'),
plot.caption = element_text(family = 'Arial')) +
labs(caption = 'By Xisca Pe')
# Graph -------------------------------------------------------------------
# Plot
ggparcoord(mcflurry_sub,
columns = 2:6, groupColumn = 1, order = "anyClass",
showPoints = TRUE,
title = "Parallel Coordinate Plot for McFlurry",
alphaLines = 0.8) +
theme_bw() +
scale_color_manual(values = paleta_colores) +
xlab('Characteristic') + ylab('Norm Value') +
theme(legend.position = 'top',
plot.title = element_text(hjust = 0.5, size = 20, family = 'Arial', face = 'bold'),
plot.caption = element_text(family = 'Arial'),
legend.title = element_blank()) +
labs(caption = 'By Xisca Pe')
# Graph -------------------------------------------------------------------
# Plot
ggparcoord(mcflurry_sub,
columns = 2:6, groupColumn = 1, order = "anyClass",
showPoints = TRUE,
title = "Parallel Coordinate Plot for McFlurry",
alphaLines = 0.8) +
theme_bw() +
scale_color_manual(values = paleta_colores) +
xlab('Characteristic') + ylab('Norm Value') +
theme(legend.position = 'left',
plot.title = element_text(hjust = 0.5, size = 20, family = 'Arial', face = 'bold'),
plot.caption = element_text(family = 'Arial'),
legend.title = element_blank()) +
labs(caption = 'By Xisca Pe')
# Graph -------------------------------------------------------------------
# Plot
ggparcoord(mcflurry_sub,
columns = 2:6, groupColumn = 1, order = "anyClass",
showPoints = TRUE,
title = "Parallel Coordinate Plot for McFlurry",
alphaLines = 0.8) +
theme_bw() +
scale_color_manual(values = paleta_colores) +
xlab('Characteristic') + ylab('Norm Value') +
theme(legend.position = 'right',
plot.title = element_text(hjust = 0.5, size = 20, family = 'Arial', face = 'bold'),
plot.caption = element_text(family = 'Arial'),
legend.title = element_blank()) +
labs(caption = 'By Xisca Pe')
