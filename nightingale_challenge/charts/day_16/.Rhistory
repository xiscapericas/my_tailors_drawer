panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$viridis, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
setwd("~/Desktop/graph_challenge")
setwd("~/Desktop/graph_challenge/day_15")
USArrests
data_usa <- USArrests
# Packages ----------------------------------------------------------------
library(data.table)
library(ggplot2)
data_usa <- as.data.table(USArrests)
data_usadata_usa
data_usa
dd <- dist(scale(USArrests), method = "euclidean")
dd
data_usa
?scale
?idst
?dist
USArrests
getwd8)
getwd()
pokemons <- fread('../day_7/PokemonDatabase.csv')
pokemons
colnames(pokemons)
features <- c('Pokemon Height', 'Pokemon Weight', 'Primary Type', 'Base Happiness', 'Region of Origin',
'Attack Stat', 'Defense Stat', 'Speed Stat')
pokemons_c <- pokemons[, .('Pokemon Name', features)]
pokemons_c
pokemons_c <- pokemons[, c('Pokemon Name', features)]
pokemons_c
pokemons_c <- pokemons[, c('Pokemon Name', features), with = F]
pokemons_c
pokemons
pokemons[`Pokedex Number` %in% seq(1,101,1)]
pokemons[`Pokedex Number` %in% seq(1,101,1), `Pokemon Name`]
pokemons_c <- pokemons[`Pokedex Number` %in% seq(1,101,1), c('Pokemon Name', features), with = F]
pokemons_c
## Distance
rownames(pokemons_c) <- pokemons_c[, `Pokemon Name`]
pokemons_c[duplicated(`Pokemon Name`)]
pokemons_c[`Pokemon Name` == pokemons_c[duplicated(`Pokemon Name`), `Pokemon Name`][1], ]
pokemons_c <- pokemons[`Pokedex Number` %in% seq(1,101,1), c('Pokemon Name', features), with = F][!duplicated(`Pokemon Name`)]
## Distance
rownames(pokemons_c) <- pokemons_c[, `Pokemon Name`]
pokemons_c[, `Pokemon Name` := NULL]
pokemons_c
dd <- dist(scale(pokemons_c), method = "euclidean")
USArrests
features <- c('Pokemon Height', 'Pokemon Weight', 'Base Happiness', 'Attack Stat', 'Defense Stat', 'Speed Stat')
pokemons_c <- pokemons[`Pokedex Number` %in% seq(1,101,1), c('Pokemon Name', features), with = F][!duplicated(`Pokemon Name`)]
## Distance
rownames(pokemons_c) <- pokemons_c[, `Pokemon Name`]
pokemons_c[, `Pokemon Name` := NULL]
dd <- dist(scale(pokemons_c), method = "euclidean")
sapply(pokemons_c, class)
pokemons_c
colnames(pokemons_c)
setdiff(colnames(pokemons_c), c('Pokemon Name'))
## Convert to numeric
numeric_vars <- setdiff(colnames(pokemons_c), c('Pokemon Name'))
# Data --------------------------------------------------------------------
pokemons <- fread('../day_7/PokemonDatabase.csv')
features <- c('Pokemon Height', 'Pokemon Weight', 'Base Happiness', 'Attack Stat', 'Defense Stat', 'Speed Stat')
pokemons_c <- pokemons[`Pokedex Number` %in% seq(1,101,1), c('Pokemon Name', features), with = F][!duplicated(`Pokemon Name`)]
## Convert to numeric
numeric_vars <- setdiff(colnames(pokemons_c), c('Pokemon Name'))
pokemons_c[, (numeric_vars) := lapply(.SD, function(x) as.numeric(x)), .SDcols = numeric_vars]
warnings()
pokemons_c <- pokemons[`Pokedex Number` %in% seq(1,101,1), c('Pokemon Name', features), with = F][!duplicated(`Pokemon Name`)]
pokemons_c
pokemons_c[, `Base Happiness` := as.numeric(`Base Happiness`)]
pokemons_c[!grepl('[0-9]', `Base Happiness`)]]
pokemons_c[!grepl('[0-9]', `Base Happiness`)]
# Data --------------------------------------------------------------------
pokemons <- fread('../day_7/pokemon.csv')
pokemons
## Introduce NA for wrong data
pokemons_c[!grep('[0-9]', `Base Happiness`)]
sapply(numeric_vars, function(x) {
pokemons_c[!grep('[0-9]', get(x)), (x) := NA]
})
## Convert to numeric
pokemons_c[, (numeric_vars) := lapply(.SD, function(x) as.numeric(x)), .SDcols = numeric_vars]
pokemons_c
## Distance
rownames(pokemons_c) <- pokemons_c[, `Pokemon Name`]
pokemons_c[, `Pokemon Name` := NULL]
dd <- dist(scale(pokemons_c), method = "euclidean")
# Graph -------------------------------------------------------------------
hc <- hclust(dd, method = "ward.D2")
plot(hc)
pokemons_c
rownames(pokemons_c)
plot(hc, hang = -1, cex = 0.6)
## Distance
pokemons_c
## Convert to numeric
pokemons_c[, (numeric_vars) := lapply(.SD, function(x) as.numeric(x)), .SDcols = numeric_vars]
pokemons <- fread('../day_7/pokemon.csv')
features <- c('Pokemon Height', 'Pokemon Weight', 'Base Happiness', 'Attack Stat', 'Defense Stat', 'Speed Stat')
pokemons_c <- pokemons[`Pokedex Number` %in% seq(1,101,1), c('Pokemon Name', features), with = F][!duplicated(`Pokemon Name`)]
## Introduce NA for wrong data
numeric_vars <- setdiff(colnames(pokemons_c), c('Pokemon Name'))
sapply(numeric_vars, function(x) {
pokemons_c[!grep('[0-9]', get(x)), (x) := NA]
})
## Convert to numeric
pokemons_c[, (numeric_vars) := lapply(.SD, function(x) as.numeric(x)), .SDcols = numeric_vars]
## Distance
pokemons_c <- as.data.frame(pokemons_c)
# Data --------------------------------------------------------------------
pokemons <- fread('../day_7/pokemon.csv')
features <- c('Pokemon Height', 'Pokemon Weight', 'Base Happiness', 'Attack Stat', 'Defense Stat', 'Speed Stat')
# Data --------------------------------------------------------------------
pokemons <- fread('../day_7/PokemonDatabase.csv')
features <- c('Pokemon Height', 'Pokemon Weight', 'Base Happiness', 'Attack Stat', 'Defense Stat', 'Speed Stat')
pokemons_c <- pokemons[`Pokedex Number` %in% seq(1,101,1), c('Pokemon Name', features), with = F][!duplicated(`Pokemon Name`)]
## Introduce NA for wrong data
numeric_vars <- setdiff(colnames(pokemons_c), c('Pokemon Name'))
sapply(numeric_vars, function(x) {
pokemons_c[!grep('[0-9]', get(x)), (x) := NA]
})
## Convert to numeric
pokemons_c[, (numeric_vars) := lapply(.SD, function(x) as.numeric(x)), .SDcols = numeric_vars]
## Distance
pokemons_c <- as.data.frame(pokemons_c)
pokemons_c
rownames(pokemons_c) <- pokemons_c[, `Pokemon Name`]
rownames(pokemons_c) <- pokemons_c$`Pokemon Name`
pokemons_c$`Pokemon Name` <- NULL
pokemons_c
dd <- dist(scale(pokemons_c), method = "euclidean")
# Graph -------------------------------------------------------------------
hc <- hclust(dd, method = "ward.D2")
plot(hc, hang = -1, cex = 0.6)
plot(hc, cex = 0.6)
colnames(pokemons)
sapply(pokemons, class)
colnames(pokemons)
pokemons
dcast.data.table(pokemons, formula = `Pokemon Name` ~ `Primary Type`)
dcast.data.table(pokemons[!duplicated(`Pokemon Name`)], formula = `Pokemon Name` ~ `Primary Type`)
dcast.data.table(pokemons[!duplicated(`Pokemon Name`)], formula = `Pokemon Name` ~ `Primary Type`, value.var = 'length')
## Create numeric for type
pokemons[!duplicated(`Pokemon Name`)]
## Create numeric for type
dcast.data.table(pokemons[!duplicated(`Pokemon Name`)], formula = `Pokemon Name` ~ `Primary Type`)
# Data --------------------------------------------------------------------
pokemons <- fread('../day_7/PokemonDatabase.csv')[!duplicated(`Pokemon Name`)]
pokemons
features <- c('Pokemon Height', 'Pokemon Weight', 'Base Happiness', 'Health Stat', 'Attack Stat', 'Defense Stat', 'Speed Stat', 'Base Stat Total')
## Create numeric for type
dcast.data.table(pokemons, formula = `Pokemon Name` ~ `Primary Type`)
pokemons
## Create numeric for type
dcast.data.table(pokemons, `Pokemon Name` ~ `Primary Type`)
## Create numeric for type
dcast.data.table(pokemons, `Pokemon Name` ~ `Primary Type`, value.var = 'length')
## Create numeric for type
dcast.data.table(pokemons, `Pokemon Name` ~ `Primary Type`, fun.aggregate = 'length')
## Create numeric for type
dcast.data.table(pokemons, `Pokemon Name` ~ `Primary Type`, fun.aggregate = 'count')
?dcast.data.table
## Create numeric for type
dcast.data.table(pokemons, `Pokemon Name` ~ `Primary Type`, fun.aggregate = lenght)
pokemons
## Create numeric for type
pokemons[, id := 1]
dcast.data.table(pokemons, `Pokemon Name` ~ `Primary Type`, fun.aggregate = sum, value.var = 'id')
pokemon[dcast.data.table(pokemons, `Pokemon Name` ~ `Primary Type`, fun.aggregate = sum, value.var = 'id'), on = 'Pokemon Name']
pokemons[dcast.data.table(pokemons, `Pokemon Name` ~ `Primary Type`, fun.aggregate = sum, value.var = 'id'), on = 'Pokemon Name']
pokemons <- dcast.data.table(pokemons, `Pokemon Name` ~ `Primary Type`, fun.aggregate = sum, value.var = 'id')[pokemons, on = 'Pokemon Name']
pokemons
pokemons[, unique(`Primary Type`)]
## Create small dataset
features <- c('Pokemon Height', 'Pokemon Weight', 'Base Happiness', 'Health Stat', 'Attack Stat', 'Defense Stat', 'Speed Stat', 'Base Stat Total')
pokemons_c <- pokemons[`Pokedex Number` %in% seq(1,101,1), c('Pokemon Name', features, pokemons[, unique(`Primary Type`)]), with = F][!duplicated(`Pokemon Name`)]
## Introduce NA for wrong data
numeric_vars <- setdiff(colnames(pokemons_c), c('Pokemon Name'))
sapply(numeric_vars, function(x) {
pokemons_c[!grep('[0-9]', get(x)), (x) := NA]
})
## Convert to numeric
pokemons_c[, (numeric_vars) := lapply(.SD, function(x) as.numeric(x)), .SDcols = numeric_vars]
## Distance
pokemons_c <- as.data.frame(pokemons_c)
rownames(pokemons_c) <- pokemons_c$`Pokemon Name`
pokemons_c$`Pokemon Name` <- NULL
dd <- dist(scale(pokemons_c), method = "euclidean")
# Graph -------------------------------------------------------------------
hc <- hclust(dd, method = "ward.D2")
plot(hc, cex = 0.6)
plot(hc, cex = 0.6, horiz = TRUE)
hcd <- as.dendrogram(hc)
plot(hcd,  xlab = "Height", horiz = TRUE)
plot(hc, cex = 0.6, horiz = TRUE)
install.packages('ape')
library(ape)
plot(as.phylo(hc), cex = 0.6, label.offset = 0.5)
plot(as.phylo(hc), type = "fan")
## Color
clus_num = cutree(hc, pokemons[, uniqueN(`Primary Type`)])
plot(as.phylo(hc), type = "fan", tip.color = colors[clus_num], label.offset = 1, cex = 0.7)
clus_num
colors
mycolor <- rev(c("#33ccff", "#bfbfbf", "#808080", "#8000ff", "#ccb3ff", "#ffccff",
"#ccffff", "#996633", "#009933", "#4d0099", "#ffffcc", "#ff6600",
"#cc9900", "#ff66ff", "#ffff00", "#ff0066", "#000000", "#00cc99"))
plot(as.phylo(hc), type = "fan", tip.color = mycolor[clus_num], label.offset = 1, cex = 0.7)
install.packages('ggdendro')
library(ggdendro)
?ggdendro
dendro_data_k <- function(hc, k) {
hcdata    <-  ggdendro::dendro_data(hc, type = "rectangle")
seg       <-  hcdata$segments
labclust  <-  cutree(hc, k)[hc$order]
segclust  <-  rep(0L, nrow(seg))
heights   <-  sort(hc$height, decreasing = TRUE)
height    <-  mean(c(heights[k], heights[k - 1L]), na.rm = TRUE)
for (i in 1:k) {
xi      <-  hcdata$labels$x[labclust == i]
idx1    <-  seg$x    >= min(xi) & seg$x    <= max(xi)
idx2    <-  seg$xend >= min(xi) & seg$xend <= max(xi)
idx3    <-  seg$yend < height
idx     <-  idx1 & idx2 & idx3
segclust[idx] <- i
}
idx                    <-  which(segclust == 0L)
segclust[idx]          <-  segclust[idx + 1L]
hcdata$segments$clust  <-  segclust
hcdata$segments$line   <-  as.integer(segclust < 1L)
hcdata$labels$clust    <-  labclust
hcdata
}
dendro_data_k <- function(hc, k) {
hcdata    <-  ggdendro::dendro_data(hc, type = "rectangle")
seg       <-  hcdata$segments
labclust  <-  cutree(hc, k)[hc$order]
segclust  <-  rep(0L, nrow(seg))
heights   <-  sort(hc$height, decreasing = TRUE)
height    <-  mean(c(heights[k], heights[k - 1L]), na.rm = TRUE)
for (i in 1:k) {
xi      <-  hcdata$labels$x[labclust == i]
idx1    <-  seg$x    >= min(xi) & seg$x    <= max(xi)
idx2    <-  seg$xend >= min(xi) & seg$xend <= max(xi)
idx3    <-  seg$yend < height
idx     <-  idx1 & idx2 & idx3
segclust[idx] <- i
}
idx                    <-  which(segclust == 0L)
segclust[idx]          <-  segclust[idx + 1L]
hcdata$segments$clust  <-  segclust
hcdata$segments$line   <-  as.integer(segclust < 1L)
hcdata$labels$clust    <-  labclust
hcdata
}
set_labels_params <- function(nbLabels,
direction = c("tb", "bt", "lr", "rl"),
fan       = FALSE) {
if (fan) {
angle       <-  360 / nbLabels * 1:nbLabels + 90
idx         <-  angle >= 90 & angle <= 270
angle[idx]  <-  angle[idx] + 180
hjust       <-  rep(0, nbLabels)
hjust[idx]  <-  1
} else {
angle       <-  rep(0, nbLabels)
hjust       <-  0
if (direction %in% c("tb", "bt")) { angle <- angle + 45 }
if (direction %in% c("tb", "rl")) { hjust <- 1 }
}
list(angle = angle, hjust = hjust, vjust = 0.5)
}
plot_ggdendro <- function(hcdata,
direction   = c("lr", "rl", "tb", "bt"),
fan         = FALSE,
scale.color = NULL,
branch.size = 1,
label.size  = 3,
nudge.label = 0.01,
expand.y    = 0.1) {
direction <- match.arg(direction) # if fan = FALSE
ybreaks   <- pretty(segment(hcdata)$y, n = 5)
ymax      <- max(segment(hcdata)$y)
## branches
p <- ggplot() +
geom_segment(data         =  segment(hcdata),
aes(x        =  x,
y        =  y,
xend     =  xend,
yend     =  yend,
linetype =  factor(line),
colour   =  factor(clust)),
lineend      =  "round",
show.legend  =  FALSE,
size         =  branch.size)
## orientation
if (fan) {
p <- p +
coord_polar(direction = -1) +
scale_x_continuous(breaks = NULL,
limits = c(0, nrow(label(hcdata)))) +
scale_y_reverse(breaks = ybreaks)
} else {
p <- p + scale_x_continuous(breaks = NULL)
if (direction %in% c("rl", "lr")) {
p <- p + coord_flip()
}
if (direction %in% c("bt", "lr")) {
p <- p + scale_y_reverse(breaks = ybreaks)
} else {
p <- p + scale_y_continuous(breaks = ybreaks)
nudge.label <- -(nudge.label)
}
}
# labels
labelParams <- set_labels_params(nrow(hcdata$labels), direction, fan)
hcdata$labels$angle <- labelParams$angle
p <- p +
geom_text(data        =  label(hcdata),
aes(x       =  x,
y       =  y,
label   =  label,
colour  =  factor(clust),
angle   =  angle),
vjust       =  labelParams$vjust,
hjust       =  labelParams$hjust,
nudge_y     =  ymax * nudge.label,
size        =  label.size,
show.legend =  FALSE)
# colors and limits
if (!is.null(scale.color)) {
p <- p + scale_color_manual(values = scale.color)
}
ylim <- -round(ymax * expand.y, 1)
p    <- p + expand_limits(y = ylim)
p
}
hc
hcdata <- dendro_data_k(hc, 3)
p <- plot_ggdendro(hcdata,
direction   = "lr",
expand.y    = 0.2)
p
p <- plot_ggdendro(hcdata,
fan         = TRUE,
scale.color = mycolor,
label.size  = 4,
nudge.label = 0.02,
expand.y    = 0.4)
p + theme_bw()
hcdata <- dendro_data_k(hc, pokemons[, uniqueN(`Primary Type`)])
p <- plot_ggdendro(hcdata,
fan         = TRUE,
scale.color = mycolor,
label.size  = 4,
nudge.label = 0.02,
expand.y    = 0.4)
p + theme_bw()
uniqueN(`Primary Type`)]
pokemons[, uniqueN(`Primary Type`)]
mycolor
length)mycolor
length(mycolor)
p <- plot_ggdendro(hcdata,
fan         = TRUE,
scale.color = c(mycolor, 'black'),
label.size  = 4,
nudge.label = 0.02,
expand.y    = 0.4)
p + theme_bw()
p + theme(panel.background = element_rect(color = 'black'))
p + theme(panel.background = element_rect(color = 'black')) + theme_void()
p + theme_void() + theme(panel.background = element_rect(color = 'black'))
p + theme_void() + theme(panel.background = element_rect(fill = 'black'))
p <- plot_ggdendro(hcdata,
fan         = TRUE,
scale.color = c(mycolor, 'white'),
label.size  = 4,
nudge.label = 0.02,
expand.y    = 0.4)
p + theme_void() + theme(panel.background = element_rect(fill = 'black'))
p + theme_void() + theme(panel.background = element_rect(fill = 'gray'))
p + theme_void() + theme(panel.background = element_rect(fill = 'red'))
p + theme_void() + theme(panel.background = element_rect(fill = 'blue'))
p + theme_void() + theme(panel.background = element_rect(fill = '#a1d5f7'))
p <- plot_ggdendro(hcdata,
fan         = TRUE,
scale.color = sample(c(mycolor, 'white')),
label.size  = 4,
nudge.label = 0.02,
expand.y    = 0.4)
p + theme_void() + theme(panel.background = element_rect(fill = '#a1d5f7'))
p <- plot_ggdendro(hcdata,
fan         = TRUE,
scale.color = sample(c(mycolor, 'white')),
label.size  = 4,
nudge.label = 0.02,
expand.y    = 0.4)
p + theme_void() + theme(panel.background = element_rect(fill = '#a1d5f7'))
p <- plot_ggdendro(hcdata,
fan         = TRUE,
scale.color = sample(c(mycolor, 'white')),
label.size  = 4,
nudge.label = 0.02,
expand.y    = 0.4)
p + theme_void() + theme(panel.background = element_rect(fill = '#a1d5f7'))
c(mycolor, 'white')
p <- plot_ggdendro(hcdata,
fan         = TRUE,
scale.color = sample(c(mycolor, 'white')),
label.size  = 4,
nudge.label = 0.02,
expand.y    = 0.4)
p + theme_void() + theme(panel.background = element_rect(fill = '#a1d5f7'))
p <- plot_ggdendro(hcdata,
fan         = TRUE,
scale.color = sample(c(mycolor, 'white')),
label.size  = 4,
nudge.label = 0.02,
expand.y    = 0.4)
p + theme_void() + theme(panel.background = element_rect(fill = '#a1d5f7'))
p + theme_void() +
theme(panel.background = element_rect(fill = '#a1d5f7'),
plot.title = element_text(hjust = 0.5, size = 20)) +
labs(title = 'Chocolate bar with rating > 3.5 per country',
caption = 'By Xisca Pe')
p + theme_void() +
theme(panel.background = element_rect(fill = '#a1d5f7'),
plot.title = element_text(hjust = 0.5, size = 15)) +
labs(title = 'Pokemon Generation One Clustering',
caption = 'By Xisca Pe')
setwd("~/Desktop/graph_challenge/day_16")
# Packages ----------------------------------------------------------------
library(data.table)
install.packages("waffle", repos = "https://cinc.rud.is")
devtools::install_git("https://git.rud.is/hrbrmstr/waffle.git")
devtools::install_git("https://git.sr.ht/~hrbrmstr/waffle")
