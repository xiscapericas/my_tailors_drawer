geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
setwd("~/Desktop/graph_challenge/day_6")
# Packages ----------------------------------------------------------------
library(data.table)
library(viridis) #https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html
# Get Data ----------------------------------------------------------------
cha_death <- fread('character-deaths.csv')
cha_death
cha_death[!is.na(`Book of Death`), .N, by = `Boook of Death`]
cha_death[!is.na(`Book of Death`), .N, by = `Book of Death`]
## Death per Book
cha_death[!is.na(`Book of Death`), .N, by = `Book of Death`]
## Death per Book
cha_death[!is.na(`Book of Death`), .N, by = `Book of Death`][, prop := N / sum(N)]
cha_death
## Death per Book
death_per_book <-cha_death[!is.na(`Book of Death`), .N, by = `Book of Death`][, prop := N / sum(N)]
death_per_book
death_per_book
library(rCharts)
# Graph -------------------------------------------------------------------
p5 <- mPlot(x = "Book of Death", y = "prop", data = death_per_book, type = "Donut")
# Graph -------------------------------------------------------------------
p <- mPlot(x = "Book of Death", y = "prop", data = death_per_book, type = "Donut")
p$print("chart1", cdn = TRUE, include_assets = TRUE)
p
# load library
library(ggplot2)
# Create test data.
data <- data.frame(
category=c("A", "B", "C"),
count=c(10, 60, 30)
)
# Compute percentages
data$fraction <- data$count / sum(data$count)
# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))
# Compute label position
data$labelPosition <- (data$ymax + data$ymin) / 2
# Compute a good label
data$label <- paste0(data$category, "\n value: ", data$count)
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
scale_fill_brewer(palette=4) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
data
death_per_book
death_per_book[order(-N)]
death_per_book[order(-N)][, cumsum(prop)]
death_per_book[order(-N)][, .(cumsum(prop), cumsum(prop) - prop[1])]
death_per_book[order(-N)][, .(cumsum(prop), c(0, cumsum(prop)[1:(nrow(death_per_book)-1)])
]
death_per_book[order(-N)][, .(cumsum(prop), c(0, cumsum(prop)[1:(nrow(death_per_book)-1))]
death_per_book[order(-N)][, .(cumsum(prop), c(0, cumsum(prop)[1:(nrow(death_per_book)-1)))]
death_per_book[order(-N)][, .(cumsum(prop), c(0, cumsum(prop)[1:(nrow(death_per_book)-1)]))]
death_per_book[order(-N)][, `:=` (
ymax = cumsum(prop),
ymin = c(0, cumsum(prop)[1:(nrow(death_per_book)-1)]))
]
death_per_book
death_per_book <- death_per_book[order(-N)][, `:=` (
ymax = cumsum(prop),
ymin = c(0, cumsum(prop)[1:(nrow(death_per_book)-1)]))
]
death_per_book
death_per_book <- death_per_book[order(-N)][, `:=` (
]
## Death per Book
death_per_book <- cha_death[!is.na(`Book of Death`), .N, by = `Book of Death`][, prop := N / sum(N)]
death_per_book <- death_per_book[order(-N)][, `:=` (
ymax = cumsum(prop),
ymin = c(0, cumsum(prop)[1:(nrow(death_per_book)-1)]))
]
death_per_book
death_per_book
data
scales::percent(0.387171)
death_per_book <- death_per_book[order(-N)][, `:=` (
ymax = cumsum(prop),
ymin = c(0, cumsum(prop)[1:(nrow(death_per_book)-1)]))
][, `:=` (
label_position = (ymax + ymin) / 2,
label = scales::percent(prop)
)]
death_per_book
death_per_book
# Graph -------------------------------------------------------------------
ggplot(death_per_book, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=`Book of Death`)) +
geom_rect()
death_per_book <- death_per_book[order(-N)][, `:=` (
ymax = cumsum(prop),
ymin = c(0, cumsum(prop)[1:(nrow(death_per_book)-1)]))
][, `:=` (
label_position = (ymax + ymin) / 2,
label = scales::percent(prop)
)][, book_of_death := as.factor(`Book of Death`)]
# Graph -------------------------------------------------------------------
ggplot(death_per_book, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=book_of_death)) +
geom_rect()
# Graph -------------------------------------------------------------------
ggplot(death_per_book, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=book_of_death)) +
geom_rect() + coord_polar()
# Graph -------------------------------------------------------------------
ggplot(death_per_book, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=book_of_death)) +
geom_rect() + coord_polar(theta="y")
# Graph -------------------------------------------------------------------
ggplot(death_per_book, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=book_of_death)) +
geom_rect() + coord_polar(theta="y") +
scale_fill_viridis()
# Graph -------------------------------------------------------------------
ggplot(death_per_book, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=book_of_death)) +
geom_rect() + coord_polar(theta="y") +
scale_fill_viridis(discrete = T)
# Graph -------------------------------------------------------------------
ggplot(death_per_book, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=book_of_death)) +
geom_rect() + coord_polar(theta="y") +
scale_fill_viridis(discrete = T) +
xlim(c(2,4))
# Graph -------------------------------------------------------------------
ggplot(death_per_book, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=book_of_death)) +
geom_rect() + coord_polar(theta="y") +
scale_fill_viridis(discrete = T) +
xlim(c(2, 4)) + theme_bw()
# Graph -------------------------------------------------------------------
ggplot(death_per_book, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=book_of_death)) +
geom_rect() + coord_polar(theta="y") +
scale_fill_viridis(discrete = T) +
xlim(c(2, 4)) + theme_bw() + theme(legend.position = 'none')
# Graph -------------------------------------------------------------------
ggplot(death_per_book, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=book_of_death)) +
geom_rect() + coord_polar(theta="y") +
scale_fill_viridis(discrete = T) +
xlim(c(2, 4)) + theme_bw() +
theme(legend.position = 'none', panel.background = element_blank())
# Graph -------------------------------------------------------------------
ggplot(death_per_book, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=book_of_death)) +
geom_rect() + coord_polar(theta="y") +
scale_fill_viridis(discrete = T) +
xlim(c(2, 4)) + theme_bw() +
theme(legend.position = 'none', panel.background = element_rect(color = 'white'))
# Graph -------------------------------------------------------------------
ggplot(death_per_book, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=book_of_death)) +
geom_rect() + coord_polar(theta="y") +
scale_fill_viridis(discrete = T) +
xlim(c(2, 4)) + theme_void() +
theme(legend.position = 'none',
panel.background = element_rect(color = 'white'))
# Graph -------------------------------------------------------------------
ggplot(death_per_book, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=book_of_death)) +
geom_rect() + coord_polar(theta="y") +
scale_fill_viridis(discrete = T, option = 'B') +
xlim(c(2, 4)) + theme_void() +
theme(legend.position = 'none')
# Graph -------------------------------------------------------------------
ggplot(death_per_book, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=book_of_death)) +
geom_rect() + coord_polar(theta="y") +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
scale_fill_viridis(discrete = T, option = 'B') +
xlim(c(2, 4)) + theme_void() +
theme(legend.position = 'none')
# Graph -------------------------------------------------------------------
ggplot(death_per_book, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=book_of_death)) +
geom_rect() + coord_polar(theta="y") +
geom_label( x=3.5, aes(y=label_position, label=label), size=6) +
scale_fill_viridis(discrete = T, option = 'B') +
xlim(c(2, 4)) + theme_void() +
theme(legend.position = 'none')
library(plotly)
# Graph -------------------------------------------------------------------
ggplot(death_per_book, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=book_of_death)) +
geom_rect() + coord_polar(theta="y") +
#geom_label( x=3.5, aes(y=label_position, label=labe), size=6) +
scale_fill_viridis(discrete = T, option = 'B') +
xlim(c(2, 4)) + theme_void() +
theme(legend.position = 'none')
# Graph -------------------------------------------------------------------
p <- ggplot(death_per_book, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=book_of_death)) +
geom_rect() + coord_polar(theta="y") +
#geom_label( x=3.5, aes(y=label_position, label=labe), size=6) +
scale_fill_viridis(discrete = T, option = 'B') +
xlim(c(2, 4)) + theme_void() +
theme(legend.position = 'none')
pp <- ggplotly(p, tooltip="label")
?ggplotly
pp
plot_ly(data = death_per_book, labels = book_of_death, values = prop)
plot_ly(data = death_per_book, labels = "book_of_death", values = "prop")
fig <- plot_ly(data = death_per_book, labels = "book_of_death", values = "prop")
fig <- plot_ly(data = death_per_book, labels = "book_of_death", values = "prop")
add_pie(fig, hole = 0.6)
fig <- add_pie(fig, hole = 0.6)
print(fig)
fig <- plot_ly(data = death_per_book, labels = "book_of_death", values = "prop")
fig <- add_pie(fig, hole = 0.6)
layout(fig, title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE)))
fig <- plot_ly(data = death_per_book, labels = "book_of_death", values = "prop")
fig <- add_pie(fig, hole = 0.6)
layout(fig, title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
?plot_ly
fig <- plot_ly(data = death_per_book, labels = "book_of_death", values = prop)
fig <- plot_ly(data = death_per_book, labels = ~book_of_death, values = ~prop)
fig <- add_pie(fig, hole = 0.6)
layout(fig, title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig <- plot_ly(data = death_per_book[order(prop)], labels = ~book_of_death, values = ~prop)
fig <- add_pie(fig, hole = 0.6)
layout(fig, title = "GOT Death per Book",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig <- plot_ly(data = death_per_book[order(prop)],
labels = ~book_of_death, values = ~prop,
textposition = 'inside', hoverinfo = 'text')
fig <- add_pie(fig, hole = 0.6)
layout(fig, title = "GOT Death per Book",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig <- plot_ly(data = death_per_book[order(prop)],
labels = ~book_of_death, values = ~prop,
textposition = 'inside', hoverinfo = ~label)
fig <- add_pie(fig, hole = 0.6)
layout(fig, title = "GOT Death per Book",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
death_per_book
death_per_book <- death_per_book[order(-N)][, `:=` (
ymax = cumsum(prop),
ymin = c(0, cumsum(prop)[1:(nrow(death_per_book)-1)]))
][, `:=` (
label_position = (ymax + ymin) / 2,
label = paste0('Book ', `Book of Death`)
)][, book_of_death := as.factor(`Book of Death`)]
fig <- plot_ly(data = death_per_book[order(prop)],
labels = ~book_of_death, values = ~prop,
textposition = 'inside', hoverinfo = ~label)
death_per_book
fig <- plot_ly(data = death_per_book[order(prop)][, .(prop, book_of_death, label)],
labels = ~book_of_death, values = ~prop,
textposition = 'inside', hoverinfo = ~label)
fig <- add_pie(fig, hole = 0.6)
layout(fig, title = "GOT Death per Book",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig <- plot_ly(data = death_per_book[order(prop)][, .(prop, book_of_death, label)],
labels = ~book_of_death, values = ~prop,
textposition = 'inside', hoverinfo = "label")
fig
fig <- add_pie(fig, hole = 0.6)
layout(fig, title = "GOT Death per Book",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
death_per_book
book_of_death[,.N]
death_per_book[,.N]
death_per_book[, .N]
# Graph -------------------------------------------------------------------
## Colors
mycolor <- colormap(colormap=colormaps$spring, nshades=max(death_per_book[, .N]))
library(colormap)
# Graph -------------------------------------------------------------------
## Colors
mycolor <- colormap(colormap=colormaps$spring, nshades=max(death_per_book[, .N]))
mycolor <- sample(mycolor, length(mycolor))
fig <- plot_ly(data = death_per_book[order(prop)][, .(prop, book_of_death, label)],
textposition = 'inside', hoverinfo = "label",
)
mycolor
fig <- plot_ly(data = death_per_book[order(prop)][, .(prop, book_of_death, label)],
labels = ~book_of_death, values = ~prop,
textposition = 'inside', hoverinfo = "label",
marker = list(colors = mycolor, line = list(color = '#FFFFFF', width = 1)))
fig <- add_pie(fig, hole = 0.6)
layout(fig, title = "GOT Death per Book",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
# Graph -------------------------------------------------------------------
## Colors
mycolor <- colormap(colormap=colormaps$viridis, nshades=max(death_per_book[, .N]))
mycolor <- sample(mycolor, length(mycolor))
fig <- plot_ly(data = death_per_book[order(prop)][, .(prop, book_of_death, label)],
labels = ~book_of_death, values = ~prop,
textposition = 'inside', hoverinfo = "label",
marker = list(colors = mycolor, line = list(color = '#FFFFFF', width = 1)))
fig <- add_pie(fig, hole = 0.6)
layout(fig, title = "GOT Death per Book",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
# Graph -------------------------------------------------------------------
## Colors
mycolor <- colormap(colormap=colormaps$summer, nshades=max(death_per_book[, .N]))
mycolor <- sample(mycolor, length(mycolor))
fig <- plot_ly(data = death_per_book[order(prop)][, .(prop, book_of_death, label)],
labels = ~book_of_death, values = ~prop,
textposition = 'inside', hoverinfo = "label",
marker = list(colors = mycolor, line = list(color = '#FFFFFF', width = 1)))
fig <- add_pie(fig, hole = 0.6)
layout(fig, title = "GOT Death per Book",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
# Graph -------------------------------------------------------------------
## Colors
mycolor <- colormap(colormap=colormaps$hot, nshades=max(death_per_book[, .N]))
mycolor <- sample(mycolor, length(mycolor))
fig <- plot_ly(data = death_per_book[order(prop)][, .(prop, book_of_death, label)],
labels = ~book_of_death, values = ~prop,
textposition = 'inside', hoverinfo = "label",
marker = list(colors = mycolor, line = list(color = '#FFFFFF', width = 1)))
fig <- add_pie(fig, hole = 0.6)
layout(fig, title = "GOT Death per Book",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
mycolor <- colormap(colormap=colormaps$hot, nshades=max(death_per_book[, .N]))
mycolor <- sample(mycolor, length(mycolor))
fig <- plot_ly(data = death_per_book[order(prop)][, .(prop, book_of_death, label)],
labels = ~book_of_death, values = ~prop,
textposition = 'inside', hoverinfo = "label",
marker = list(colors = mycolor, line = list(color = '#FFFFFF', width = 1)))
fig <- add_pie(fig, hole = 0.6)
layout(fig, title = "GOT % Deaths per Book",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
mycolor <- colormap(colormap=colormaps$hot, nshades=max(death_per_book[, .N]))
mycolor <- sample(mycolor, length(mycolor))
fig <- plot_ly(data = death_per_book[order(prop)][, .(prop, book_of_death, label)],
labels = ~book_of_death, values = ~prop,
textposition = 'inside', hoverinfo = "label",
marker = list(colors = mycolor, line = list(color = '#FFFFFF', width = 1)))
fig <- add_pie(fig, hole = 0.6)
layout(fig, title = "GOT % Deaths per Book",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
# Graph -------------------------------------------------------------------
## Colors
mycolor <- colormap(colormap=colormaps$temperature, nshades=max(death_per_book[, .N]))
mycolor <- sample(mycolor, length(mycolor))
fig <- plot_ly(data = death_per_book[order(prop)][, .(prop, book_of_death, label)],
labels = ~book_of_death, values = ~prop,
textposition = 'inside', hoverinfo = "label",
marker = list(colors = mycolor, line = list(color = '#FFFFFF', width = 1)))
fig <- add_pie(fig, hole = 0.6)
layout(fig, title = "GOT % Deaths per Book",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
death_per_book
# Graph -------------------------------------------------------------------
## Colors
mycolor <- colormap(colormap=colormaps$cool, nshades=max(death_per_book[, .N]))
mycolor <- sample(mycolor, length(mycolor))
fig <- plot_ly(data = death_per_book[order(prop)][, .(prop, book_of_death, label)],
labels = ~book_of_death, values = ~prop,
textposition = 'inside', hoverinfo = "label",
marker = list(colors = mycolor, line = list(color = '#FFFFFF', width = 1)))
fig <- add_pie(fig, hole = 0.6)
layout(fig, title = "GOT % Deaths per Book",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
mycolor <- colormap(colormap=colormaps$cool, nshades=max(death_per_book[, .N]))
mycolor <- sample(mycolor, length(mycolor))
fig <- plot_ly(data = death_per_book[order(prop)][, .(prop, book_of_death, label)],
labels = ~book_of_death, values = ~prop,
textposition = 'inside', hoverinfo = "label",
marker = list(colors = mycolor, line = list(color = '#FFFFFF', width = 1)))
fig <- add_pie(fig, hole = 0.6)
layout(fig, title = "GOT % Deaths per Book",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
mycolor <- colormap(colormap=colormaps$autumn, nshades=max(death_per_book[, .N]))
mycolor <- sample(mycolor, length(mycolor))
fig <- plot_ly(data = death_per_book[order(prop)][, .(prop, book_of_death, label)],
labels = ~book_of_death, values = ~prop,
textposition = 'inside', hoverinfo = "label",
marker = list(colors = mycolor, line = list(color = '#FFFFFF', width = 1)))
fig <- add_pie(fig, hole = 0.6)
layout(fig, title = "GOT % Deaths per Book",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
cha_death
cha_death[duplicated(name)]
cha_death[duplicated(Name)]
## Death per Book
death_per_book <- cha_death[!duplicated(Name)][!is.na(`Book of Death`), .N, by = `Book of Death`][, prop := N / sum(N)]
death_per_book
death_per_book <- death_per_book[order(-N)][, `:=` (
ymax = cumsum(prop),
ymin = c(0, cumsum(prop)[1:(nrow(death_per_book)-1)]))
][, `:=` (
label_position = (ymax + ymin) / 2,
label = paste0('Book ', `Book of Death`)
)][, book_of_death := as.factor(`Book of Death`)]
mycolor <- colormap(colormap=colormaps$autumn, nshades=max(death_per_book[, .N]))
mycolor <- sample(mycolor, length(mycolor))
fig <- plot_ly(data = death_per_book[order(prop)][, .(prop, book_of_death, label)],
labels = ~book_of_death, values = ~prop,
textposition = 'inside', hoverinfo = "label",
marker = list(colors = mycolor, line = list(color = '#FFFFFF', width = 1)))
fig <- add_pie(fig, hole = 0.6)
layout(fig, title = "GOT % Deaths per Book",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
# Graph -------------------------------------------------------------------
## Colors
mycolor <- colormap(colormap=colormaps$bluered, nshades=max(death_per_book[, .N]))
mycolor <- sample(mycolor, length(mycolor))
fig <- plot_ly(data = death_per_book[order(prop)][, .(prop, book_of_death, label)],
labels = ~book_of_death, values = ~prop,
textposition = 'inside', hoverinfo = "label",
marker = list(colors = mycolor, line = list(color = '#FFFFFF', width = 1)))
fig <- add_pie(fig, hole = 0.6)
layout(fig, title = "GOT % Deaths per Book",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
mycolor <- colormap(colormap=colormaps$velocity_blue, nshades=max(death_per_book[, .N]))
mycolor <- sample(mycolor, length(mycolor))
fig <- plot_ly(data = death_per_book[order(prop)][, .(prop, book_of_death, label)],
labels = ~book_of_death, values = ~prop,
textposition = 'inside', hoverinfo = "label",
marker = list(colors = mycolor, line = list(color = '#FFFFFF', width = 1)))
fig <- add_pie(fig, hole = 0.6)
layout(fig, title = "GOT % Deaths per Book",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig <- plot_ly(data = death_per_book[order(prop)][, .(prop, book_of_death, label)],
labels = ~book_of_death, values = ~prop,
textposition = 'inside', hoverinfo = "label",
marker = list(colors = mycolor, line = list(color = '#FFFFFF', width = 1)))
fig <- add_pie(fig, hole = 0.6)
layout(fig, title = "GOT % Deaths per Book",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
mycolor <- colormap(colormap=colormaps$velocity_green, nshades=max(death_per_book[, .N]))
mycolor <- sample(mycolor, length(mycolor))
fig <- plot_ly(data = death_per_book[order(prop)][, .(prop, book_of_death, label)],
labels = ~book_of_death, values = ~prop,
textposition = 'inside', hoverinfo = "label",
marker = list(colors = mycolor, line = list(color = '#FFFFFF', width = 1)))
fig <- add_pie(fig, hole = 0.6)
layout(fig, title = "GOT % Deaths per Book",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
