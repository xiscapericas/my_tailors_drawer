ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$spring, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
my_elements <- sample(result[domain != ''][, unique(element)], 8)
data_for_graph <- result[element %in% my_elements, .(element, target, domain)][order(element, domain)]
## Elements dt
elements_dt <- data.table(element = unique(c(data_for_graph$element, data_for_graph$target)))
### With domain info
element_d <- result[, .(element, domain)][elements_dt, on = 'element']
element_d <- element_d[!duplicated(element_d)]
## Graph
graph <- graph_from_data_frame(d = data_for_graph, vertices = element_d, directed = F)
# Color
mycolor <- colormap(colormap=colormaps$spring, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$viridis, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Packages ----------------------------------------------------------------
library(data.table)
library(plotly)
setwd("~/Desktop/graph_challenge/day_8")
# Data --------------------------------------------------------------------
pokemon <- fread('../day_7/pokemon.csv')
colnames(pokemon)
pokemon_attack_type <- pokemon[, .(attack = `Attack`, defense = `Defense`, primary_type = as.factor(`Type 1`), name = Name, generation = as.factor(Generation))]
p <- plot_ly(pokemon_attack_type = df,
x=~attack,y=~defense, z=~primary_type,
type = "contour", colorscale=mycolor)
# Graph -------------------------------------------------------------------
mycolor <- rev(c("#33ccff", "#bfbfbf", "#808080", "#8000ff", "#ccb3ff", "#ffccff",
"#ccffff", "#996633", "#009933", "#4d0099", "#ffffcc", "#ff6600",
"#cc9900", "#ff66ff", "#ffff00", "#ff0066", "#000000", "#00cc99"))
p <- plot_ly(pokemon_attack_type = df,
x=~attack,y=~defense, z=~primary_type,
type = "contour", colorscale=mycolor)
p
pokemon_attack_type
p <- plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~primary_type,
type = "contour", colorscale=mycolor)
p
pokemon_attack_type
pokemon_attack_type[order(-attack)]
pokemon_attack_type[, .N, by = primary_type]
pokemon_attack_type[, .N, by = primary_type][order(-N)]
pokemon_attack_type[, .N, by = primary_type][order(-N)][1:8]
best_types <- pokemon_attack_type[primary_type %in% pokemon_attack_type[, .N, by = primary_type][order(-N)][1:8, primary_type], ]
p <- plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~primary_type,
type = "contour")
p
p <- plot_ly(data = best_types,
x=~attack,y=~defense, z=~primary_type,
type = "contour")
p
best_types
pokemon_attack_type
pokemon
p <- plot_ly(data = best_types,
x=~attack,y=~defense, z=~generation,
type = "contour")
p
pokemon_attack_type[, generation := as.factor(generation)]
p <- plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~generation,
type = "contour")
p
pokemon_attack_type
pokemon_attack_type[, class(generation)]
pokemon_attack_type[, table(generation)]
p <- plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~generation,
type = "contour", colorscale = 'jet')
p
plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~generation,
type = "contour", contours = list(showLabels = T),
colorscale = 'jet')
plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~as.factor(generation),
type = "contour", contours = list(showLabels = T),
colorscale = 'jet')
pokemon
pokemon_attack_type <- pokemon[, .(attack = `Attack`, defense = `Defense`, total = Total, primary_type = as.factor(`Type 1`), name = Name, generation = as.factor(Generation))]
plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~total,
type = "contour", contours = list(showLabels = T),
colorscale = 'jet')
plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~total,
type = "contour",
colorscale = 'jet')
layout(fig, title = "Pokemon Attack, Defense and Total power relation",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig <- plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~total,
type = "contour",
colorscale = 'jet')
layout(fig, title = "Pokemon Attack, Defense and Total power relation",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
layout(fig, title = "Pokemon Attack, Defense and Total power relation",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T))
pokemon
fig <- plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~total,
type = "contour", hoverinfo = "Name",
colorscale = 'jet')
layout(fig, title = "Pokemon Attack, Defense and Total power relation",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T))
fig <- plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~total,
type = "contour", hoverinfo = ~Name,
colorscale = 'jet')
layout(fig, title = "Pokemon Attack, Defense and Total power relation",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T))
pokemon_attack_type
fig <- plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~total,
type = "contour", hoverinfo = ~name,
colorscale = 'jet')
layout(fig, title = "Pokemon Attack, Defense and Total power relation",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T))
fig <- plot_ly(type = 'scatter', mode = 'markers')
fig <- fig %>%
add_trace(
x = c(1:5),
y = rnorm(5, mean = 5),
text = c("Text A", "Text B", "Text C", "Text D", "Text E"),
hoverinfo = 'text',
marker = list(color='green'),
showlegend = F
)
fig
fig <- plot_ly(type = 'contour', mode = 'markers')
fig <- fig %>%
add_trace(
x = pokemon_attack_type$attack,
y = pokemon_attack_type$defense,
z = pokemon_attack_type$total,
text = pokemon_attack_type$name,
hoverinfo = 'text',
marker = list(color='black'),
showlegend = F
)
fig
fig <- plot_ly(type = 'contour', mode = 'markers')
fig <- fig %>%
add_trace(
x = pokemon_attack_type$attack,
y = pokemon_attack_type$defense,
z = pokemon_attack_type$total,
text = pokemon_attack_type$name,
hoverinfo = 'text'
)
fig
# Graph -------------------------------------------------------------------
mycolor <- rev(c("#33ccff", "#bfbfbf", "#808080", "#8000ff", "#ccb3ff", "#ffccff",
"#ccffff", "#996633", "#009933", "#4d0099", "#ffffcc", "#ff6600",
"#cc9900", "#ff66ff", "#ffff00", "#ff0066", "#000000", "#00cc99"))
fig <- plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~total,
type = "contour", hoverinfo = ~name,
colorscale = mycolor)
layout(fig, title = "Pokemon Attack, Defense and Total power relation",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T))
fig <- plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~total,
type = "contour", hoverinfo = ~name,
contours = list(showlabels = TRUE),
colorscale = mycolor)
layout(fig, title = "Pokemon Attack, Defense and Total power relation",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T))
fig <- plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~total,
type = "contour", hoverinfo = ~name,
contours = list(showlabels = TRUE),
colorscale = 'viridis')
layout(fig, title = "Pokemon Attack, Defense and Total power relation",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T))
fig <- plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~total,
type = "contour", hoverinfo = ~name,
contours = list(showlabels = TRUE),
colorscale = 'Viridis')
layout(fig, title = "Pokemon Attack, Defense and Total power relation",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T))
fig <- plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~total,
type = "contour", hoverinfo = ~name,
contours = list(showlabels = TRUE),
colorscale = 'peach')
layout(fig, title = "Pokemon Attack, Defense and Total power relation",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T))
fig <- plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~total,
type = "contour",
contours = list(showlabels = TRUE),
colorscale = 'Inferno')
layout(fig, title = "Pokemon Attack, Defense and Total power relation",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T))
fig <- plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~total,
type = "contour",
contours = list(showlabels = TRUE),
colorscale = 'inferno')
layout(fig, title = "Pokemon Attack, Defense and Total power relation",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T))
fig = px.colors.sequential.swatches()
fig <- plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~total,
type = "contour",
contours = list(showlabels = TRUE),
colorscale = 'Dark2')
layout(fig, title = "Pokemon Attack, Defense and Total power relation",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T))
fig <- plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~total,
type = "contour",
contours = list(showlabels = TRUE),
colorscale = 'plotly3')
layout(fig, title = "Pokemon Attack, Defense and Total power relation",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T))
fig <- plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~total,
type = "contour",
contours = list(showlabels = TRUE),
colorscale = 'Cividis')
layout(fig, title = "Pokemon Attack, Defense and Total power relation",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T))
fig <- plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~total,
type = "contour",
contours = list(showlabels = TRUE),
colorscale = 'Magma')
layout(fig, title = "Pokemon Attack, Defense and Total power relation",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T))
fig <- plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~total,
type = "contour",
contours = list(showlabels = TRUE),
colorscale = 'magma')
layout(fig, title = "Pokemon Attack, Defense and Total power relation",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T))
fig <- plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~total,
type = "contour",
contours = list(showlabels = TRUE),
colorscale = 'Burg')
layout(fig, title = "Pokemon Attack, Defense and Total power relation",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T))
fig <- plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~total,
type = "contour",
contours = list(showlabels = TRUE),
colorscale = 'burg')
layout(fig, title = "Pokemon Attack, Defense and Total power relation",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T))
fig <- plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~total,
type = "contour",
contours = list(showlabels = TRUE),
colorscale = 'Spectral')
layout(fig, title = "Pokemon Attack, Defense and Total power relation",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T))
fig <- plot_ly(data = pokemon_attack_type,
x=~attack,y=~defense, z=~total,
type = "contour",
contours = list(showlabels = TRUE),
colorscale = 'Hot')
layout(fig, title = "Pokemon Attack, Defense and Total power relation",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = T))
pokemon_attack_type[attack > 150 & defense < 50]
pokemon_attack_type[attack > 100 & defense < 50]
pokemon_attack_type[attack < 50 & defense > 200]
pokemon_attack_type[attack < 20 & defense < 50]
pokemon[Name == 'Blissey']
setwd("~/Desktop/graph_challenge/day_9")
# Packages ----------------------------------------------------------------
library(openxlsx)
install.packages('openxlsx')
# Packages ----------------------------------------------------------------
library(openxlsx)
library(data.table)
# Data --------------------------------------------------------------------
euro_data <- read.xlsx('eurovision_song_contest_1975_2019.xlsx')
# Data --------------------------------------------------------------------
euro_data <- as.data.table(read.xlsx('eurovision_song_contest_1975_2019.xlsx'))
euro_data
colnames(euro_data)
euro_data[, table(`(semi-).final``)]
c
cc
ejoqe''
+
´
1
`
`
´
`
`
C
Ñ
ZC<SDNOINVD<
C
euro_data
euro_data
´
``''
