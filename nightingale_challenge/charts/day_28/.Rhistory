guides(color=guide_legend(title="Domain"))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 2) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('LCD Arc Graph')
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 4) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('LCD Arc Graph')
?colormap
colormaps$viridis
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('LCD Arc Graph')
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('LCD Arc Graph')
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('LCD Arc Graph')
data_for_graph[grep('poke', element)]
data_for_graph[grep('poke', result)]
result[grepl('poke', element)]
result[grepl('digi', element)]
result[grepl('games', element)]
result[grepl('dig', element)]
result[grepl('poke', element)]
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
data_for_graph
data_for_graph[order(domain)]
data_for_graph[order(element, domain)]
## Graph
graph <- graph_from_data_frame(d = data_for_graph[order(element, domain)], vertices = element_d, directed = F)
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Graph -------------------------------------------------------------------
my_elements <- sample(result[domain != ''][, unique(element)], 10)
data_for_graph <- result[element %in% my_elements, .(element, target, domain)][order(element, domain)]
## Elements dt
elements_dt <- data.table(element = unique(c(data_for_graph$element, data_for_graph$target)))
### With domain info
element_d <- result[, .(element, domain)][elements_dt, on = 'element']
element_d <- element_d[!duplicated(element_d)]
## Graph
graph <- graph_from_data_frame(d = data_for_graph, vertices = element_d, directed = F)
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$spring, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
my_elements <- sample(result[domain != ''][, unique(element)], 8)
data_for_graph <- result[element %in% my_elements, .(element, target, domain)][order(element, domain)]
## Elements dt
elements_dt <- data.table(element = unique(c(data_for_graph$element, data_for_graph$target)))
### With domain info
element_d <- result[, .(element, domain)][elements_dt, on = 'element']
element_d <- element_d[!duplicated(element_d)]
## Graph
graph <- graph_from_data_frame(d = data_for_graph, vertices = element_d, directed = F)
# Color
mycolor <- colormap(colormap=colormaps$spring, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$viridis, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
library(data.table)
c(rep('privately', 4), rep('government',4)),
235/(235+36)
300/(300+45)
(30+45)
1*(1.05)
2*(1.05)
1*(1.05) + 2*(1.05)
6+5+2+1
6+5+(1*1.05)+(2*1.05)
6+5+(1*1.05)+(2*1.05) / 6+5+2+1
(6+5+(1*1.05)+(2*1.05) - 6+5+2+1) / (6+5+2+1)
1105+53
948+105
400*(1.07)
(400+400*0.07)
4/20
1105/53
53/1105
948/105
3159/1054
214000/50
(214000*62)/50
175000*0.1
175000*0.35
(0.1*175000)
175000/0.1
(175000/0.1)*0.35
85/1.25
76/1.35
160/0.68
81/1.07
43/2.40
14.000*0.04
14000*0.04
560*3
13000*0.04
(13000-(13000*0.04))-((13000-(13000*0.04))*0.04)
(433*45)/25
((433*45)/25) - ((935*62)/187)
(6-4)/ 4
9072 - (9072*0.11)
(9072 - (9072*0.11)) * 1.4
11303.71- (9072*0.11)
9 * 0.11
9 - (9 * 0.11)
8.01 * 1.4
11.214 - 8
40 / 1.25
774 - 722
(7.395 - 4462) /  4462
(7395 - 4462) /  4462
6*1.5
(437500) * 1.20
(437500) / (1.20 * 0.2)
(437500 * 100) / 20
((437500 * 100) / 20) / 1.2
setwd("~/Desktop/graph_challenge/day_28")
library(readxl)
# Get Data ----------------------------------------------------------------
eurovision <- read_xlsx('../day_9/eurovision_song_contest_1975_2019.xlsx')
# Get Data ----------------------------------------------------------------
eurovision <- as.data.table(read_xlsx('../day_9/eurovision_song_contest_1975_2019.xlsx'))
# Packages ----------------------------------------------------------------
library(data.table)
library(readxl)
# Get Data ----------------------------------------------------------------
eurovision <- as.data.table(read_xlsx('../day_9/eurovision_song_contest_1975_2019.xlsx'))
eurovision
make.names(eurovision)
# Get Data ----------------------------------------------------------------
eurovision <- as.data.table(read_xlsx('../day_9/eurovision_song_contest_1975_2019.xlsx'))
make.names(colnames(eurovision))
setnames(eurovision, make.names(colnames(eurovision)))
## Average Points from Jury on final
eurovision[X.semi...final := 'f' & Jury.or.Televoting == 'J', ]
## Average Points from Jury on final
eurovision[X.semi...final == 'f' & Jury.or.Televoting == 'J', ]
## Average Points from Jury on final
eurovision[X.semi...final == 'f' & Jury.or.Televoting == 'J', .(
avg_votes = sum(Points)
), by = .(From.country, To.country)]
## Average Points from Jury on final
points_from_to <- eurovision[X.semi...final == 'f' & Jury.or.Televoting == 'J', .(
avg_votes = sum(Points)
), by = .(From.country, To.country)]
library(ggplot2)
# Graph -------------------------------------------------------------------
ggplot(points_from_to, aes(x = From.country, y = To.country, fill = avg_votes)) + geom_tile()
points_from_to
points_from_to[order(-avg_votes)]
## Average Points from Jury on final
points_from_to <- eurovision[X.semi...final == 'f' & Jury.or.Televoting == 'J', .(
avg_votes = sum(Points) / seq_along(Points)
), by = .(From.country, To.country)]
# Graph -------------------------------------------------------------------
ggplot(points_from_to, aes(x = From.country, y = To.country, fill = avg_votes)) + geom_tile()
points_from_to
points_from_to[order(-avg_votes)]
eurovision[X.semi...final == 'f' & Jury.or.Televoting == 'J' & From.country == 'Cyprus' & To.country == 'Greece', ]
eurovision[X.semi...final == 'f' & Jury.or.Televoting == 'J' & From.country == 'Cyprus' & To.country == 'Greece', mean(Points)]
## Average Points from Jury on final
points_from_to <- eurovision[X.semi...final == 'f' & Jury.or.Televoting == 'J', .(
avg_votes = mean(Points)
), by = .(From.country, To.country)]
# Graph -------------------------------------------------------------------
ggplot(points_from_to, aes(x = From.country, y = To.country, fill = avg_votes)) + geom_tile()
install.packages('circlize')
library(circlize)
numbers <- sample(c(1:1000), 100, replace = T)
data <- matrix( numbers, ncol=5)
rownames(data) <- paste0("orig-", seq(1,20))
colnames(data) <- paste0("dest-", seq(1,5))
data
chordDiagram(data, transparency = 0.5)
points_from_to
dcast.data.table(points_from_to[sample(100)], From.country ~ To.country, value.var = 'avg_votes')
data_fd <- dcast.data.table(points_from_to[sample(100)], From.country ~ To.country, value.var = 'avg_votes')
matrix(data_fd)
data_fd
rownames(data_fd) <- data_fd$From.country
data_fd[, From.country := NULL]
chordDiagram(data_fd, transparency = 0.5)
data_fd <- dcast.data.table(points_from_to[sample(100)], From.country ~ To.country, value.var = 'avg_votes')
data_fd
matrix(data_fd, ncol = ncol(data_fd))
matrix(data_fd, ncol = ncol(data_fd), nrow = nrow(data_fd))
data_fd
as.matrix(data_fd)
data_m <- as.matrix(data_fd)
rownames(data_fd) <- data_fd$From.country
colnames(data_m)
data_fd <- dcast.data.table(points_from_to[sample(100)], From.country ~ To.country, value.var = 'avg_votes')
setdiff(colnames(data_fd), c('From.country'))
data_fd <- dcast.data.table(points_from_to[sample(100)], From.country ~ To.country, value.var = 'avg_votes')
data_m <- as.matrix(data_fd[, c(setdiff(colnames(data_fd), c('From.country'))), with = F])
rownames(data_m) <- data_fd$From.country
colnames(data_m)
chordDiagram(data_m, transparency = 0.5)
data_fd <- dcast.data.table(points_from_to[sample(50)], From.country ~ To.country, value.var = 'avg_votes')
data_m <- as.matrix(data_fd[, c(setdiff(colnames(data_fd), c('From.country'))), with = F])
rownames(data_m) <- data_fd$From.country
colnames(data_m)
chordDiagram(data_m, transparency = 0.5)
points_from_to
top_five <- c('France', 'Germany', 'Italy', 'Spain', 'United Kingdom')
top_five <- c('France', 'Germany', 'Italy', 'Spain', 'United Kingdom')
## Average Points from Jury on final
points_from_to <- eurovision[X.semi...final == 'f' & Jury.or.Televoting == 'J', .(
avg_votes = mean(Points)
), by = .(From.country, To.country)][From.country %in% top_five & To.country %in% top_five]
points_from_to
data_fd <- dcast.data.table(points_from_to, From.country ~ To.country, value.var = 'avg_votes')
data_m <- as.matrix(data_fd[, c(setdiff(colnames(data_fd), c('From.country'))), with = F])
rownames(data_m) <- data_fd$From.country
colnames(data_m)
chordDiagram(data_m, transparency = 0.5)
?chordDiagram
points_from_to
points_from_to[From.country == 'United Kingdom']
chordDiagram(data_m, transparency = 0.5,
big.gap = 10)
points_from_to
points_from_to[, unique(From.country)]
## Colors
grid_colors <- c('#003f5c', '#58508d', '#bc5090', '#ff6361', '#ffa600')
names(grid_colors)
names(grid_colors) <- points_from_to[, unique(From.country)]
## Chord Diagram
chordDiagram(data_m, transparency = 0.5,
big.gap = 10,
grid.col = grid_colors)
## Chord Diagram
chordDiagram(data_m, transparency = 0.5,
big.gap = 10,
grid.col = grid_colors,
symmetric = T)
