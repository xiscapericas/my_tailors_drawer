geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$spring, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
my_elements <- sample(result[domain != ''][, unique(element)], 8)
data_for_graph <- result[element %in% my_elements, .(element, target, domain)][order(element, domain)]
## Elements dt
elements_dt <- data.table(element = unique(c(data_for_graph$element, data_for_graph$target)))
### With domain info
element_d <- result[, .(element, domain)][elements_dt, on = 'element']
element_d <- element_d[!duplicated(element_d)]
## Graph
graph <- graph_from_data_frame(d = data_for_graph, vertices = element_d, directed = F)
# Color
mycolor <- colormap(colormap=colormaps$spring, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$viridis, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
library(data.table)
c(rep('privately', 4), rep('government',4)),
235/(235+36)
300/(300+45)
(30+45)
1*(1.05)
2*(1.05)
1*(1.05) + 2*(1.05)
6+5+2+1
6+5+(1*1.05)+(2*1.05)
6+5+(1*1.05)+(2*1.05) / 6+5+2+1
(6+5+(1*1.05)+(2*1.05) - 6+5+2+1) / (6+5+2+1)
1105+53
948+105
400*(1.07)
(400+400*0.07)
4/20
1105/53
53/1105
948/105
3159/1054
214000/50
(214000*62)/50
175000*0.1
175000*0.35
(0.1*175000)
175000/0.1
(175000/0.1)*0.35
85/1.25
76/1.35
160/0.68
81/1.07
43/2.40
14.000*0.04
14000*0.04
560*3
13000*0.04
(13000-(13000*0.04))-((13000-(13000*0.04))*0.04)
(433*45)/25
((433*45)/25) - ((935*62)/187)
(6-4)/ 4
9072 - (9072*0.11)
(9072 - (9072*0.11)) * 1.4
11303.71- (9072*0.11)
9 * 0.11
9 - (9 * 0.11)
8.01 * 1.4
11.214 - 8
40 / 1.25
774 - 722
(7.395 - 4462) /  4462
(7395 - 4462) /  4462
6*1.5
(437500) * 1.20
(437500) / (1.20 * 0.2)
(437500 * 100) / 20
((437500 * 100) / 20) / 1.2
setwd("~/Desktop/graph_challenge/day_27")
# Packages ----------------------------------------------------------------
library(data.table)
# Get Data ----------------------------------------------------------------
r_packages <- fread('r_packages.csv')
r_packages
r_packages[, date := as.Date(Date)]
r_packages
# Get Data ----------------------------------------------------------------
r_packages <- fread('r_packages.csv')
r_packages[, date := lubridate::ymd('%m/%d%y')]
# Get Data ----------------------------------------------------------------
r_packages <- fread('r_packages.csv')
r_packages[, date := lubridate::ymd('%m/%d/%y')]
r_packages
r_packages[, date := lubridate::ymd(Date, '%m/%d/%y')]
# Get Data ----------------------------------------------------------------
r_packages <- fread('r_packages.csv')
r_packages[, date := lubridate::ymd(Date, '%m/%d/%y')]
r_packages
r_packages[1, Date]
r_packages[1, as.Date(Date, '%m/%d/%y')]
# Get Data ----------------------------------------------------------------
r_packages <- fread('r_packages.csv')
r_packages[, date := as.Date(Date, '%m/%d/%y')]
r_packages
## Aggregate by class
classes <- data.table(
class = c('shiny'),
words = list('learning', 'machine learning', 'forecast', 'models', 'time series', 'classi', 'regression', 'boosting', 'bayes', 'greedy', 'estimator', 'network')
)
classes
classes[1, ]
## Aggregate by class
classes <- data.table(
class = c('ML', 'shiny', 'text processing', 'plots'),
words = c(
list('learning', 'machine learning', 'forecast', 'models', 'time series', 'classi', 'regression', 'boosting', 'bayes', 'greedy', 'estimator', 'network'),
list('shiny'),
list('text', 'token', 'word', 'manipulation'),
list('ggplot', 'plot', 'maps', 'visual')
)
shiny: shiny
machine learning: machine learning, forecasting, models, time series, classification, regression, linear, boosting, bayesian, greedy, estimator, network, parameter
text processing: text, token, word2vec, text manipulation
plots: ggplot, visualization, plot, maps,
genetics: genetics, gene, genom,
mathematics: disparity, matrix, cor, conv, distance,
image: image analysis, markov, computer vision,
data manipulation: query, data, tidy, json, normal,  database, parallel, table, date, atom feeds,
)
## Aggregate by class
classes <- data.table(
class = c('ML', 'shiny', 'text processing', 'plots'),
words = c(
list('learning', 'machine learning', 'forecast', 'models', 'time series', 'classi', 'regression', 'boosting', 'bayes', 'greedy', 'estimator', 'network'),
list('shiny'),
list('text', 'token', 'word', 'manipulation'),
list('ggplot', 'plot', 'maps', 'visual')
)
)
packages_clas <- read.csv("~/Desktop/graph_challenge/day_27/packages_clas.csv")
View(packages_clas)
## Aggregate by class
packages_clas <- fread("packages_clas.csv")
packages_clas
ind <- 1
r_packages[ind, words]
colnames(packages_clas)
packages_clas[1, ]
packages_clas[1, words]
packages_clas[ind, words]
unlist(packages_clas[ind, words])
unlist(packages_clas[2, words])
strsplit(packages_clas[2, words], ',')
unlist(strsplit(packages_clas[2, words], ','))
gsub(' ', '', unlist(strsplit(packages_clas[2, words], ',')))
r_packages
r_packages[,description := tolower(title)]
r_packages[, class(title)]
r_packages[,description := tolower(as.character(title))]
r_packages
r_packages[1, Title]
r_packages[1, class(Title)]
r_packages[,description := tolower((Title))]
r_packages
r_packages[, tolower(Title)]
r_packages[, tolower(as.character(Title())]
r_packages[, tolower(as.character(Title))]
# Get Data ----------------------------------------------------------------
r_packages <- fread('r_packages.csv', encoding = 'latin1')
# Get Data ----------------------------------------------------------------
r_packages <- fread('r_packages.csv', encoding = 'UTF-8')
r_packages[, date := as.Date(Date, '%m/%d/%y')]
r_packages[,description := tolower((Title))]
r_packages[grepl('Statistical Process', TItle)]
r_packages[grepl('Statistical Process', Title)]
r_packages[, title := gsub("[^[:alnum:][:blank:]?&/\\-]", "", Title)]
r_packages[,description := tolower((title))]
r_packages
my_word
my_word <- 'shiny'
r_packages[grepl(my_word, title)]
## Aggregate by class
packages_clas <- fread("packages_clas.csv")
sapply(1:nrow(packages_clas), function(ind) {
sapply(gsub(' ', '', unlist(strsplit(packages_clas[ind, words], ','))), function(my_word) {
r_packages[grepl(my_word, title), package_group := packages_clas[ind, class]]
})
})
r_packages
r_packages
r_packages[, table(package_group)]
r_packages[, table(is.na(packages_group))]
r_packages[, table(is.na(package_group))]
my_word <- 'model'
# Get Data ----------------------------------------------------------------
r_packages <- fread('r_packages.csv', encoding = 'UTF-8')
r_packages[, date := as.Date(Date, '%m/%d/%y')]
r_packages[, title := gsub("[^[:alnum:][:blank:]?&/\\-]", "", Title)]
r_packages[,description := tolower((title))]
## Aggregate by class
packages_clas <- fread("packages_clas.csv")
sapply(1:nrow(packages_clas), function(ind) {
sapply(gsub(' ', '', unlist(strsplit(packages_clas[ind, words], ','))), function(my_word) {
print(my_word)
r_packages[grepl(my_word, title), package_group := packages_clas[ind, class]]
})
})
## 30DGraphChallenge
# Packages ----------------------------------------------------------------
library(data.table)
# Get Data ----------------------------------------------------------------
r_packages <- fread('r_packages.csv', encoding = 'UTF-8')
r_packages[, date := as.Date(Date, '%m/%d/%y')]
r_packages[, title := gsub("[^[:alnum:][:blank:]?&/\\-]", "", Title)]
r_packages[,description := tolower((title))]
## Aggregate by class
packages_clas <- fread("packages_clas.csv")
sapply(1:nrow(packages_clas), function(ind) {
sapply(unlist(strsplit(packages_clas[ind, words], ',')), function(my_word) {
print(my_word)
r_packages[grepl(my_word, title), package_group := packages_clas[ind, class]]
})
})
# Graph -------------------------------------------------------------------
r_packages
r_packages
my_word <- 'model'
r_packages[grepl(my_word, title)]
# Get Data ----------------------------------------------------------------
r_packages <- fread('r_packages.csv', encoding = 'UTF-8')
r_packages[, date := as.Date(Date, '%m/%d/%y')]
r_packages[, title := gsub("[^[:alnum:][:blank:]?&/\\-]", "", Title)]
r_packages[,description := tolower((title))]
## Aggregate by class
packages_clas <- fread("packages_clas.csv")
sapply(1:nrow(packages_clas), function(ind) {
sapply(unlist(strsplit(packages_clas[ind, words], ',')), function(my_word) {
print(my_word)
r_packages[grepl(my_word, description), package_group := packages_clas[ind, class]]
})
})
r_packages
r_packages
## Aggregate by class
packages_clas <- fread("packages_clas.csv")
r_packages <- fread('r_packages.csv', encoding = 'UTF-8')
r_packages[, date := as.Date(Date, '%m/%d/%y')]
r_packages[, title := gsub("[^[:alnum:][:blank:]?&/\\-]", "", Title)]
r_packages[,description := tolower((title))]
## Aggregate by class
packages_clas <- fread("packages_clas.csv")
sapply(1:nrow(packages_clas), function(ind) {
print(packages_clas[ind, class])
sapply(unlist(strsplit(packages_clas[ind, words], ',')), function(my_word) {
print(my_word)
r_packages[grepl(my_word, description), package_group := packages_clas[ind, class]]
})
})
r_packages
r_packages
ind
unlist(strsplit(packages_clas[ind, words], ','))
packages_clas[ind, class]
packages_class
packages_clas
r_packages <- fread('r_packages.csv', encoding = 'UTF-8')
r_packages[, date := as.Date(Date, '%m/%d/%y')]
r_packages[, title := gsub("[^[:alnum:][:blank:]?&/\\-]", "", Title)]
r_packages[,description := tolower((title))]
## Aggregate by class
packages_clas <- fread("packages_clas.csv")
sapply(1:nrow(packages_clas), function(ind) {
print(packages_clas[ind, class])
sapply(unlist(strsplit(packages_clas[ind, words], ',')), function(my_word) {
print(my_word)
r_packages[grepl(my_word, description), package_group := packages_clas[ind, class]]
})
})
r_packages
r_packages
r_packages[, table(is.na(package_group))]
r_packages[!is.na(package_group), .(
date, num_packages = cumsum(ind)
), by = .(date, package_group)]
## Cumulative
r_packages[, ind := 1]
r_packages[!is.na(package_group), .(
date, num_packages = cumsum(ind)
), by = .(date, package_group)]
r_packages[!is.na(package_group)][order(date), .(
date, num_packages = cumsum(ind)
), by = .(date, package_group)]
r_packages[!is.na(package_group)][order(date), .(
date, num_packages = sum(ind)
), by = .(date, package_group)][, num_packages_cum := cumsum(num_packages)]
r_packages
cum_num_packages <- r_packages[!is.na(package_group)][order(date), .(
date, num_packages = sum(ind)
), by = .(date, package_group)][, num_packages_cum := cumsum(num_packages)]
cum_num_packages
cum_num_packages
cum_num_packages[package_group == 'ML']
cum_num_packages[package_group == 'ML'][order(date)]
num_packages <- r_packages[!is.na(package_group)][order(date), .(
date, num_packages = sum(ind)
), by = .(date, package_group)]
num_packages
num_packages[, .(cum_num := cumsum(num_paclages)), by = .(package_group, date)]
num_packages[, .(cum_num = cumsum(num_paclages)), by = .(package_group, date)]
num_packages[, .(cum_num = cumsum(num_packages)), by = .(package_group, date)]
num_packages[package_group == 'ML']
num_packages[package_group == 'ML'][order(date)]
num_packages[package_group == 'ML'][order(date)][, cumsum(num_packages)]
num_packages[, .(cum_num = cumsum(num_packages), date), by = .(package_group)]
cumnum_packages <- r_packages[!is.na(package_group)][order(date), .(
date, num_packages = sum(ind)
), by = .(date, package_group)][, .(cum_num = cumsum(num_packages), date), by = .(package_group)]
cumnum_packages
install.packages('gganimate')
library(ggplot2)
library(gganimate)
install.packages('gifski')
library(gganimate)
cumnum_packages
# Graph -------------------------------------------------------------------
ggplot(cumnum_packages, aes(x = package_group, y = cum_num)) + geom_bar(stat = 'identity', position = 'dodge') +
theme_bw() + coord_flip() +
transition_time(date)
library(viridis)
# Graph -------------------------------------------------------------------
p <- ggplot(cumnum_packages, aes(x = package_group, y = cum_num, fill = package_group)) + geom_bar(stat = 'identity', position = 'dodge') +
theme_bw() + coord_flip() +
transition_time(date) +
scale_fill_viridis(discrete = T) +
theme(plot.title = element_text(hjust = 0.5, size = 20, family = 'Arial', face = 'bold'),
plot.caption = element_text(family = 'Arial')) +
labs(title = 'R-Packages Per Date: {frame_time}',
caption = 'By Xisca Pe')
# Graph -------------------------------------------------------------------
p <- ggplot(cumnum_packages, aes(x = package_group, y = cum_num, fill = package_group)) + geom_bar(stat = 'identity', position = 'dodge') +
theme_bw() + coord_flip() +
transition_time(date) +
scale_fill_viridis(discrete = T) +
theme(plot.title = element_text(hjust = 0.5, size = 20, family = 'Arial', face = 'bold'),
plot.caption = element_text(family = 'Arial')) +
labs(title = 'R-Packages Per Date: {frame_time}',
caption = 'By Xisca Pe')
## Animate
anim <- animate(p)
anim_save('r_packages.gif', anim)
?anim_save
anim_save('r_packages.gif')
## Animate & save
animate(p, duration = 10, fps = 20, width = 200, height = 200, renderer = gifski_renderer())
anim_save("output.gif")
## Animate & save
animate(p, renderer = gifski_renderer())
# Graph -------------------------------------------------------------------
p <- ggplot(cumnum_packages, aes(x = package_group, y = cum_num, fill = package_group)) + geom_bar(stat = 'identity', position = 'dodge') +
theme_bw() + coord_flip() +
transition_time(date) +
xlab('Tipo') + ylab('Package #') +
scale_fill_viridis(discrete = T, option = 'B') +
theme(plot.title = element_text(hjust = 0.5, size = 20, family = 'Arial', face = 'bold'),
plot.caption = element_text(family = 'Arial')) +
labs(title = 'R-Packages Per Date: {frame_time}',
caption = 'By Xisca Pe', fill = 'Tipo')
## Animate & save
animate(p, renderer = gifski_renderer())
## Animate & save
animate(p, renderer = gifski_renderer(), duration = 10)
anim_save("output.gif")
