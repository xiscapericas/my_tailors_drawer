# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$spring, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
my_elements <- sample(result[domain != ''][, unique(element)], 8)
data_for_graph <- result[element %in% my_elements, .(element, target, domain)][order(element, domain)]
## Elements dt
elements_dt <- data.table(element = unique(c(data_for_graph$element, data_for_graph$target)))
### With domain info
element_d <- result[, .(element, domain)][elements_dt, on = 'element']
element_d <- element_d[!duplicated(element_d)]
## Graph
graph <- graph_from_data_frame(d = data_for_graph, vertices = element_d, directed = F)
# Color
mycolor <- colormap(colormap=colormaps$spring, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$viridis, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
mycolor <- sample(mycolor, length(mycolor))
# Color
mycolor <- colormap(colormap=colormaps$hot, nshades=max(element_d[, uniqueN(domain)]))
mycolor <- sample(mycolor, length(mycolor))
# Make the graph
ggraph(graph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(color=as.factor(domain)), alpha=0.5, size = 3) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme(
legend.position="bottom", panel.background = element_rect(fill = 'white'),
plot.title = element_text(hjust = 0.5, size = 20),
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) +
guides(color=guide_legend(title="Domain")) +
ggtitle('Linked Open Data Arc Graph')
setwd("~/Desktop/graph_challenge/day_7")
# Packages ----------------------------------------------------------------
library(data.table)
library(ggplot2)
library(ggridges)
install.packages('ggridges')
library(ggridges)
library(colormap)
# Data --------------------------------------------------------------------
pokemon <- fread('PokemonDatabase.csv')
pokemon
# Data --------------------------------------------------------------------
pokemon <- fread('PokemonDatabase.csv', fill = T)
pokemon
PokemonDatabase <- read.csv("~/Desktop/graph_challenge/day_7/PokemonDatabase.csv", comment.char="#")
View(PokemonDatabase)
# Data --------------------------------------------------------------------
pokemon <- fread('PokemonDatabase.csv', encoding = 'UTF-8')
pokemon
# Data --------------------------------------------------------------------
pokemon <- fread('PokemonDatabase.csv', encoding = 'UTF-8')
pokemon
# Graph -------------------------------------------------------------------
pokemon[, uniqueN(`Primary Type`)]
colnames(pokemon)
# Graph -------------------------------------------------------------------
ggplot(pokemon, aes(x = "Attack Stat", y = "Primary Type", fill = "Primary Type")) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none")
# Graph -------------------------------------------------------------------
ggplot(pokemon, aes(x = `Attack Stat`, y = `Primary Type`, fill = `Primary Type`)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none")
pokemon[,.(`Primary Type`, `Attack Stat`)]
ggplot(pokemon, aes(x = `Attack Stat`, fill = `Primary Type`)) + geom_histogram()
pokemon[, class(`Attack Stat`)]
pokemon[, attack_stat_num := as.numeric(Attack Stat`)]
pokemon[, attack_stat_num := as.numeric(`Attack Stat`)]
pokemon[is.na(attack_stat_num), ]
pokemon[grepl('[0-9]', `Attack Stat`)]
pokemon[!grepl('[0-9]', `Attack Stat`)]
pokemon[!grepl('[0-9]', `Attack Stat`), .(`Pokemon Id`, `Attack Stat`)]
pokemon_attack_type <- pokemon[!grepl('[0-9]', `Attack Stat`), .(`Attack Stat`, `Primary Type`)]
pokemon_attack_type
pokemon_attack_type <- pokemon[grepl('[0-9]', `Attack Stat`), .(attack_stat = `Attack Stat`,
primart_type = `Primary Type`)]
pokemon_attack_type
pokemon_attack_type <- pokemon[grepl('[0-9]', `Attack Stat`), .(attack_stat = as.numeric(`Attack Stat`),
primart_type = `Primary Type`)]
pokemon_attack_type
# Graph -------------------------------------------------------------------
ggplot(pokemon_attack_type, aes(x = attack_stat, y = primary_type, fill = primary_type)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none")
pokemon_attack_type <- pokemon[grepl('[0-9]', `Attack Stat`), .(attack_stat = as.numeric(`Attack Stat`),
primary_type = `Primary Type`)]
# Graph -------------------------------------------------------------------
ggplot(pokemon_attack_type, aes(x = attack_stat, y = primary_type, fill = primary_type)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none")
pokemon_attack_type[which.max(attack_stat)]
colnames(pokemon)
pokemon_attack_type <- pokemon[grepl('[0-9]', `Attack Stat`), .(pokemon_name = `Pokemon Name`,
attack_stat = as.numeric(`Attack Stat`),
primary_type = `Primary Type`)]
pokemon_attack_type[which.max(attack_stat)]
pokemon_attack_type[, uniqueN(primary_type)]
# Graph -------------------------------------------------------------------
mycolor <- colormap(colormap=colormaps$velocity_green, nshades=max(pokemon_attack_type[, uniqueN(primary_type)]))
mycolor <- sample(mycolor, length(mycolor))
# Graph -------------------------------------------------------------------
mycolor <- colormap(colormap=colormaps$velocity_green, nshades=max(pokemon_attack_type[, uniqueN(primary_type)]))
mycolor <- sample(mycolor, length(mycolor))
ggplot(pokemon_attack_type, aes(x = attack_stat, y = primary_type, fill = primary_type)) +
geom_density_ridges() +
theme_ridges() + scale_fill_manual(values = mycolor)
# Graph -------------------------------------------------------------------
mycolor <- colormap(colormap=colormaps$picnic, nshades=max(pokemon_attack_type[, uniqueN(primary_type)]))
mycolor <- sample(mycolor, length(mycolor))
ggplot(pokemon_attack_type, aes(x = attack_stat, y = primary_type, fill = primary_type)) +
geom_density_ridges() +
theme_ridges() + scale_fill_manual(values = mycolor)
ggplot(pokemon_attack_type, aes(x = attack_stat, y = primary_type, fill = primary_type)) +
geom_density_ridges() +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none")
ggplot(pokemon_attack_type, aes(x = attack_stat, y = primary_type, fill = primary_type)) +
geom_density_ridges() + xlab('Attack Stat') + ylab('Type')
ggplot(pokemon_attack_type, aes(x = attack_stat, y = primary_type, fill = primary_type)) +
geom_density_ridges() + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none")
ggplot(pokemon_attack_type, aes(x = attack_stat, y = primary_type, fill = primary_type)) +
geom_density_ridges() + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title = element_text(hjust = 0.5))
ggplot(pokemon_attack_type, aes(x = attack_stat, y = primary_type, fill = primary_type)) +
geom_density_ridges() + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title.x = element_text(hjust = 0.5))
ggplot(pokemon_attack_type, aes(x = attack_stat, y = primary_type, fill = primary_type)) +
geom_density_ridges() + xlab('Attack Stat') + ylab('Primary type') +
theme_bw() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title.x = element_text(hjust = 0.5))
ggplot(pokemon_attack_type, aes(x = attack_stat, y = primary_type, fill = primary_type)) +
geom_density_ridges() + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title.x = element_text(hjust = 0.5),
axis.title.y = element_rect(hjust = 0.5))
ggplot(pokemon_attack_type, aes(x = attack_stat, y = primary_type, fill = primary_type)) +
geom_density_ridges() + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title.x = element_text(hjust = 0.5),
axis.title.y = element_text(hjust = 0.5))
ggplot(pokemon_attack_type, aes(x = attack_stat, y = primary_type, fill = primary_type)) +
geom_density_ridges() + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title.x = element_text(hjust = 0.5),
axis.title.y = element_text(hjust = 0.5), title = element_text(hjust = 0.5, size = 20)) +
ggtitle('Attack per Type')
ggplot(pokemon_attack_type, aes(x = attack_stat, y = primary_type, fill = primary_type)) +
geom_density_ridges() + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title.x = element_text(hjust = 0.5),
axis.title.y = element_text(hjust = 0.5),
plot.title = element_text(hjust = 0.5, size = 20)) +
ggtitle('Attack distribution per Type')
# Graph -------------------------------------------------------------------
mycolor <- colormap(colormap=colormaps$cubehelix, nshades=max(pokemon_attack_type[, uniqueN(primary_type)]))
mycolor <- sample(mycolor, length(mycolor))
ggplot(pokemon_attack_type, aes(x = attack_stat, y = primary_type, fill = primary_type)) +
geom_density_ridges() + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title.x = element_text(hjust = 0.5),
axis.title.y = element_text(hjust = 0.5),
plot.title = element_text(hjust = 0.5, size = 20)) +
ggtitle('Attack distribution per Type')
# Graph -------------------------------------------------------------------
mycolor <- colormap(colormap=colormaps$electric, nshades=max(pokemon_attack_type[, uniqueN(primary_type)]))
mycolor <- sample(mycolor, length(mycolor))
ggplot(pokemon_attack_type, aes(x = attack_stat, y = primary_type, fill = primary_type)) +
geom_density_ridges() + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title.x = element_text(hjust = 0.5),
axis.title.y = element_text(hjust = 0.5),
plot.title = element_text(hjust = 0.5, size = 20)) +
ggtitle('Attack distribution per Type')
ggplot(pokemon_attack_type, aes(x = attack_stat, y = primary_type, fill = primary_type)) +
geom_density_ridges(alpha = 0.7) + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title.x = element_text(hjust = 0.5),
axis.title.y = element_text(hjust = 0.5),
plot.title = element_text(hjust = 0.5, size = 20)) +
ggtitle('Attack distribution per Type')
# Graph -------------------------------------------------------------------
mycolor <- colormap(colormap=colormaps$rainbow_soft, nshades=max(pokemon_attack_type[, uniqueN(primary_type)]))
mycolor <- sample(mycolor, length(mycolor))
ggplot(pokemon_attack_type, aes(x = attack_stat, y = primary_type, fill = primary_type)) +
geom_density_ridges(alpha = 0.7) + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title.x = element_text(hjust = 0.5),
axis.title.y = element_text(hjust = 0.5),
plot.title = element_text(hjust = 0.5, size = 20)) +
ggtitle('Attack distribution per Type')
mycolor <- sample(mycolor, length(mycolor))
ggplot(pokemon_attack_type, aes(x = attack_stat, y = primary_type, fill = primary_type)) +
geom_density_ridges(alpha = 0.7) + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title.x = element_text(hjust = 0.5),
axis.title.y = element_text(hjust = 0.5),
plot.title = element_text(hjust = 0.5, size = 20)) +
ggtitle('Attack distribution per Type')
mycolor <- sample(mycolor, length(mycolor))
ggplot(pokemon_attack_type, aes(x = attack_stat, y = primary_type, fill = primary_type)) +
geom_density_ridges(alpha = 0.7) + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title.x = element_text(hjust = 0.5),
axis.title.y = element_text(hjust = 0.5),
plot.title = element_text(hjust = 0.5, size = 20)) +
ggtitle('Attack distribution per Type')
# Data --------------------------------------------------------------------
pokemon <- fread('pokemon.csv')
pokemon
pokemon[,class(total)]
pokemon[,class(Total)]
pokemon_attack_type <- pokemon[, .(attack = `HP`, primary_type = `Type 1`, name = Name)]
# Graph -------------------------------------------------------------------
mycolor <- colormap(colormap=colormaps$rainbow_soft, nshades=max(pokemon_attack_type[, uniqueN(primary_type)]))
mycolor <- sample(mycolor, length(mycolor))
ggplot(pokemon_attack_type, aes(x = , y = primary_type, fill = primary_type)) +
geom_density_ridges(alpha = 0.7) + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title.x = element_text(hjust = 0.5),
axis.title.y = element_text(hjust = 0.5),
plot.title = element_text(hjust = 0.5, size = 20)) +
ggtitle('Attack distribution per Type')
ggplot(pokemon_attack_type, aes(x = attack, y = primary_type, fill = primary_type)) +
geom_density_ridges(alpha = 0.7) + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title.x = element_text(hjust = 0.5),
axis.title.y = element_text(hjust = 0.5),
plot.title = element_text(hjust = 0.5, size = 20)) +
ggtitle('Attack distribution per Type')
pokemon_attack_type <- pokemon[, .(attack = `HP`, primary_type = `Type 1`, name = Name, generation = Generation)]
# Graph -------------------------------------------------------------------
mycolor <- colormap(colormap=colormaps$rainbow_soft, nshades=max(pokemon_attack_type[, uniqueN(generation)]))
mycolor <- sample(mycolor, length(mycolor))
ggplot(pokemon_attack_type, aes(x = attack, y = generation, fill = generation)) +
geom_density_ridges(alpha = 0.7) + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title.x = element_text(hjust = 0.5),
axis.title.y = element_text(hjust = 0.5),
plot.title = element_text(hjust = 0.5, size = 20)) +
ggtitle('Attack distribution per Type')
pokemon_attack_type
# Graph -------------------------------------------------------------------
mycolor <- colormap(colormap=colormaps$rainbow_soft, nshades=max(pokemon_attack_type[, uniqueN(generation)]))
mycolor <- sample(mycolor, length(mycolor))
ggplot(pokemon_attack_type, aes(x = attack, y = generation, fill = generation)) +
geom_density_ridges(alpha = 0.7) + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title.x = element_text(hjust = 0.5),
axis.title.y = element_text(hjust = 0.5),
plot.title = element_text(hjust = 0.5, size = 20)) +
ggtitle('Attack distribution per Type')
pokemon_attack_type[, class(generation)]
pokemon_attack_type <- pokemon[, .(attack = `HP`, primary_type = `Type 1`, name = Name, generation = as.factor(Generation))]
# Graph -------------------------------------------------------------------
mycolor <- colormap(colormap=colormaps$rainbow_soft, nshades=max(pokemon_attack_type[, uniqueN(generation)]))
mycolor <- sample(mycolor, length(mycolor))
mycolor
ggplot(pokemon_attack_type, aes(x = attack, y = generation, fill = generation)) +
geom_density_ridges(alpha = 0.7) + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title.x = element_text(hjust = 0.5),
axis.title.y = element_text(hjust = 0.5),
plot.title = element_text(hjust = 0.5, size = 20)) +
ggtitle('Attack distribution per Type')
ggplot(pokemon_attack_type, aes(x = attack, y = primary_type, fill = primary_type)) +
geom_density_ridges(alpha = 0.7) + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title.x = element_text(hjust = 0.5),
axis.title.y = element_text(hjust = 0.5),
plot.title = element_text(hjust = 0.5, size = 20)) +
ggtitle('Attack distribution per Type')
pokemon_attack_type <- pokemon[, .(attack = `HP`, primary_type = as.factor(`Type 1`), name = Name, generation = as.factor(Generation))]
# Graph -------------------------------------------------------------------
mycolor <- colormap(colormap=colormaps$rainbow_soft, nshades=max(pokemon_attack_type[, uniqueN(primary_type)]))
mycolor <- sample(mycolor, length(mycolor))
ggplot(pokemon_attack_type, aes(x = attack, y = primary_type, fill = primary_type)) +
geom_density_ridges(alpha = 0.7) + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title.x = element_text(hjust = 0.5),
axis.title.y = element_text(hjust = 0.5),
plot.title = element_text(hjust = 0.5, size = 20)) +
ggtitle('Attack distribution per Type')
my_color <- ("#33ccff", "#bfbfbf", "#808080", "#8000ff", "#ccb3ff", "#ffccff",
"#ccffff", "#996633", "#009933", "#4d0099", "#ffffcc", "#ff6600",
"#cc9900", "#ff66ff", "#ffff00", "#ff0066", "#000000", "#00cc99")
my_color <- c("#33ccff", "#bfbfbf", "#808080", "#8000ff", "#ccb3ff", "#ffccff",
"#ccffff", "#996633", "#009933", "#4d0099", "#ffffcc", "#ff6600",
"#cc9900", "#ff66ff", "#ffff00", "#ff0066", "#000000", "#00cc99")
ggplot(pokemon_attack_type, aes(x = attack, y = primary_type, fill = primary_type)) +
geom_density_ridges(alpha = 0.7) + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title.x = element_text(hjust = 0.5),
axis.title.y = element_text(hjust = 0.5),
plot.title = element_text(hjust = 0.5, size = 20)) +
ggtitle('Attack distribution per Type')
my_color
ggplot(pokemon_attack_type, aes(x = attack, y = primary_type, fill = primary_type)) +
geom_density_ridges(alpha = 0.7) + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor)
mycolor <- c("#33ccff", "#bfbfbf", "#808080", "#8000ff", "#ccb3ff", "#ffccff",
"#ccffff", "#996633", "#009933", "#4d0099", "#ffffcc", "#ff6600",
"#cc9900", "#ff66ff", "#ffff00", "#ff0066", "#000000", "#00cc99")
ggplot(pokemon_attack_type, aes(x = attack, y = primary_type, fill = primary_type)) +
geom_density_ridges(alpha = 0.7) + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title.x = element_text(hjust = 0.5),
axis.title.y = element_text(hjust = 0.5),
plot.title = element_text(hjust = 0.5, size = 20)) +
ggtitle('Attack distribution per Type')
reverse(mycolor)
rev(c(1,2,3))
mycolor <- rev(c("#33ccff", "#bfbfbf", "#808080", "#8000ff", "#ccb3ff", "#ffccff",
"#ccffff", "#996633", "#009933", "#4d0099", "#ffffcc", "#ff6600",
"#cc9900", "#ff66ff", "#ffff00", "#ff0066", "#000000", "#00cc99"))
ggplot(pokemon_attack_type, aes(x = attack, y = primary_type, fill = primary_type)) +
geom_density_ridges(alpha = 0.7) + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title.x = element_text(hjust = 0.5),
axis.title.y = element_text(hjust = 0.5),
plot.title = element_text(hjust = 0.5, size = 20)) +
ggtitle('Attack distribution per Type')
ggplot(pokemon_attack_type, aes(x = attack, y = primary_type, fill = primary_type)) +
geom_density_ridges(alpha = 0.7) + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title.x = element_text(hjust = 0.5),
axis.title.y = element_text(hjust = 0.5),
plot.title = element_text(hjust = 0.5, size = 20)) +
labs(title = 'Attack distribution per type', caption = 'By Xisca Pe')
pokemon_attack_type[which.max(attack)]
pokemon
pokemon_attack_type <- pokemon[, .(attack = `Attack`, primary_type = as.factor(`Type 1`), name = Name, generation = as.factor(Generation))]
# Graph -------------------------------------------------------------------
mycolor <- rev(c("#33ccff", "#bfbfbf", "#808080", "#8000ff", "#ccb3ff", "#ffccff",
"#ccffff", "#996633", "#009933", "#4d0099", "#ffffcc", "#ff6600",
"#cc9900", "#ff66ff", "#ffff00", "#ff0066", "#000000", "#00cc99"))
ggplot(pokemon_attack_type, aes(x = attack, y = primary_type, fill = primary_type)) +
geom_density_ridges(alpha = 0.7) + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title.x = element_text(hjust = 0.5),
axis.title.y = element_text(hjust = 0.5),
plot.title = element_text(hjust = 0.5, size = 20)) +
labs(title = 'Attack distribution per type', caption = 'By Xisca Pe')
ggplot(pokemon_attack_type, aes(x = attack, y = primary_type, fill = primary_type)) +
geom_density_ridges(alpha = 0.7) + xlab('Attack Stat') + ylab('Primary type') +
theme_ridges() + scale_fill_manual(values = mycolor) +
theme(legend.position = "none", axis.title.x = element_text(hjust = 0.5),
axis.title.y = element_text(hjust = 0.5),
plot.title = element_text(hjust = 0.5, size = 20)) +
labs(title = 'Attack distribution per pokemon type', caption = 'By Xisca Pe')
pokemon_attack_type[which.max(attack)]
